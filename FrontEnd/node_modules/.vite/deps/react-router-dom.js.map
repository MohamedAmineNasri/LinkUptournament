{
  "version": 3,
  "sources": ["../../react-router-dom/dist/index.js", "../../react-router/dist/index.js", "../../@remix-run/router/history.ts", "../../@remix-run/router/utils.ts", "../../@remix-run/router/router.ts"],
  "sourcesContent": ["/**\r\n * React Router DOM v6.22.3\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { UNSAFE_mapRouteProperties, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, Router, UNSAFE_useRoutesImpl, UNSAFE_NavigationContext, useHref, useResolvedPath, useLocation, useNavigate, createPath, UNSAFE_useRouteId, UNSAFE_RouteContext, useMatches, useNavigation, useBlocker } from 'react-router';\r\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_useRouteId, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, renderMatches, resolvePath, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\r\nimport { stripBasename, UNSAFE_warning, createRouter, createBrowserHistory, createHashHistory, UNSAFE_ErrorResponseImpl, UNSAFE_invariant, joinPaths, IDLE_FETCHER, matchPath } from '@remix-run/router';\r\n\r\nfunction _extends() {\r\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i];\r\n      for (var key in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  };\r\n  return _extends.apply(this, arguments);\r\n}\r\nfunction _objectWithoutPropertiesLoose(source, excluded) {\r\n  if (source == null) return {};\r\n  var target = {};\r\n  var sourceKeys = Object.keys(source);\r\n  var key, i;\r\n  for (i = 0; i < sourceKeys.length; i++) {\r\n    key = sourceKeys[i];\r\n    if (excluded.indexOf(key) >= 0) continue;\r\n    target[key] = source[key];\r\n  }\r\n  return target;\r\n}\r\n\r\nconst defaultMethod = \"get\";\r\nconst defaultEncType = \"application/x-www-form-urlencoded\";\r\nfunction isHtmlElement(object) {\r\n  return object != null && typeof object.tagName === \"string\";\r\n}\r\nfunction isButtonElement(object) {\r\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\r\n}\r\nfunction isFormElement(object) {\r\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\r\n}\r\nfunction isInputElement(object) {\r\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\r\n}\r\nfunction isModifiedEvent(event) {\r\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\r\n}\r\nfunction shouldProcessLinkClick(event, target) {\r\n  return event.button === 0 && (\r\n  // Ignore everything but left clicks\r\n  !target || target === \"_self\") &&\r\n  // Let browser handle \"target=_blank\" etc.\r\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\r\n  ;\r\n}\r\n/**\r\n * Creates a URLSearchParams object using the given initializer.\r\n *\r\n * This is identical to `new URLSearchParams(init)` except it also\r\n * supports arrays as values in the object form of the initializer\r\n * instead of just strings. This is convenient when you need multiple\r\n * values for a given key, but don't want to use an array initializer.\r\n *\r\n * For example, instead of:\r\n *\r\n *   let searchParams = new URLSearchParams([\r\n *     ['sort', 'name'],\r\n *     ['sort', 'price']\r\n *   ]);\r\n *\r\n * you can do:\r\n *\r\n *   let searchParams = createSearchParams({\r\n *     sort: ['name', 'price']\r\n *   });\r\n */\r\nfunction createSearchParams(init) {\r\n  if (init === void 0) {\r\n    init = \"\";\r\n  }\r\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\r\n    let value = init[key];\r\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\r\n  }, []));\r\n}\r\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\r\n  let searchParams = createSearchParams(locationSearch);\r\n  if (defaultSearchParams) {\r\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\r\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\r\n    // web extensions. Relevant Bugzilla tickets:\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\r\n    defaultSearchParams.forEach((_, key) => {\r\n      if (!searchParams.has(key)) {\r\n        defaultSearchParams.getAll(key).forEach(value => {\r\n          searchParams.append(key, value);\r\n        });\r\n      }\r\n    });\r\n  }\r\n  return searchParams;\r\n}\r\n// One-time check for submitter support\r\nlet _formDataSupportsSubmitter = null;\r\nfunction isFormDataSubmitterSupported() {\r\n  if (_formDataSupportsSubmitter === null) {\r\n    try {\r\n      new FormData(document.createElement(\"form\"),\r\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\r\n      0);\r\n      _formDataSupportsSubmitter = false;\r\n    } catch (e) {\r\n      _formDataSupportsSubmitter = true;\r\n    }\r\n  }\r\n  return _formDataSupportsSubmitter;\r\n}\r\nconst supportedFormEncTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\r\nfunction getFormEncType(encType) {\r\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\r\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"\\\"\" + encType + \"\\\" is not a valid `encType` for `<Form>`/`<fetcher.Form>` \" + (\"and will default to \\\"\" + defaultEncType + \"\\\"\")) : void 0;\r\n    return null;\r\n  }\r\n  return encType;\r\n}\r\nfunction getFormSubmissionInfo(target, basename) {\r\n  let method;\r\n  let action;\r\n  let encType;\r\n  let formData;\r\n  let body;\r\n  if (isFormElement(target)) {\r\n    // When grabbing the action from the element, it will have had the basename\r\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\r\n    // re-prefix in the router\r\n    let attr = target.getAttribute(\"action\");\r\n    action = attr ? stripBasename(attr, basename) : null;\r\n    method = target.getAttribute(\"method\") || defaultMethod;\r\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\r\n    formData = new FormData(target);\r\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\r\n    let form = target.form;\r\n    if (form == null) {\r\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\r\n    }\r\n    // <button>/<input type=\"submit\"> may override attributes of <form>\r\n    // When grabbing the action from the element, it will have had the basename\r\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\r\n    // re-prefix in the router\r\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\r\n    action = attr ? stripBasename(attr, basename) : null;\r\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\r\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\r\n    // Build a FormData object populated from a form and submitter\r\n    formData = new FormData(form, target);\r\n    // If this browser doesn't support the `FormData(el, submitter)` format,\r\n    // then tack on the submitter value at the end.  This is a lightweight\r\n    // solution that is not 100% spec compliant.  For complete support in older\r\n    // browsers, consider using the `formdata-submitter-polyfill` package\r\n    if (!isFormDataSubmitterSupported()) {\r\n      let {\r\n        name,\r\n        type,\r\n        value\r\n      } = target;\r\n      if (type === \"image\") {\r\n        let prefix = name ? name + \".\" : \"\";\r\n        formData.append(prefix + \"x\", \"0\");\r\n        formData.append(prefix + \"y\", \"0\");\r\n      } else if (name) {\r\n        formData.append(name, value);\r\n      }\r\n    }\r\n  } else if (isHtmlElement(target)) {\r\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\r\n  } else {\r\n    method = defaultMethod;\r\n    action = null;\r\n    encType = defaultEncType;\r\n    body = target;\r\n  }\r\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\r\n  if (formData && encType === \"text/plain\") {\r\n    body = formData;\r\n    formData = undefined;\r\n  }\r\n  return {\r\n    action,\r\n    method: method.toLowerCase(),\r\n    encType,\r\n    formData,\r\n    body\r\n  };\r\n}\r\n\r\nconst _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\", \"unstable_viewTransition\"],\r\n  _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"unstable_viewTransition\", \"children\"],\r\n  _excluded3 = [\"fetcherKey\", \"navigate\", \"reloadDocument\", \"replace\", \"state\", \"method\", \"action\", \"onSubmit\", \"relative\", \"preventScrollReset\", \"unstable_viewTransition\"];\r\n// HEY YOU! DON'T TOUCH THIS VARIABLE!\r\n//\r\n// It is replaced with the proper version at build time via a babel plugin in\r\n// the rollup config.\r\n//\r\n// Export a global property onto the window for React Router detection by the\r\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\r\n// to detect and properly classify live websites as being built with React Router:\r\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\r\nconst REACT_ROUTER_VERSION = \"6\";\r\ntry {\r\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\r\n} catch (e) {\r\n  // no-op\r\n}\r\nfunction createBrowserRouter(routes, opts) {\r\n  return createRouter({\r\n    basename: opts == null ? void 0 : opts.basename,\r\n    future: _extends({}, opts == null ? void 0 : opts.future, {\r\n      v7_prependBasename: true\r\n    }),\r\n    history: createBrowserHistory({\r\n      window: opts == null ? void 0 : opts.window\r\n    }),\r\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\r\n    routes,\r\n    mapRouteProperties: UNSAFE_mapRouteProperties,\r\n    window: opts == null ? void 0 : opts.window\r\n  }).initialize();\r\n}\r\nfunction createHashRouter(routes, opts) {\r\n  return createRouter({\r\n    basename: opts == null ? void 0 : opts.basename,\r\n    future: _extends({}, opts == null ? void 0 : opts.future, {\r\n      v7_prependBasename: true\r\n    }),\r\n    history: createHashHistory({\r\n      window: opts == null ? void 0 : opts.window\r\n    }),\r\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\r\n    routes,\r\n    mapRouteProperties: UNSAFE_mapRouteProperties,\r\n    window: opts == null ? void 0 : opts.window\r\n  }).initialize();\r\n}\r\nfunction parseHydrationData() {\r\n  var _window;\r\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\r\n  if (state && state.errors) {\r\n    state = _extends({}, state, {\r\n      errors: deserializeErrors(state.errors)\r\n    });\r\n  }\r\n  return state;\r\n}\r\nfunction deserializeErrors(errors) {\r\n  if (!errors) return null;\r\n  let entries = Object.entries(errors);\r\n  let serialized = {};\r\n  for (let [key, val] of entries) {\r\n    // Hey you!  If you change this, please change the corresponding logic in\r\n    // serializeErrors in react-router-dom/server.tsx :)\r\n    if (val && val.__type === \"RouteErrorResponse\") {\r\n      serialized[key] = new UNSAFE_ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);\r\n    } else if (val && val.__type === \"Error\") {\r\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\r\n      if (val.__subType) {\r\n        let ErrorConstructor = window[val.__subType];\r\n        if (typeof ErrorConstructor === \"function\") {\r\n          try {\r\n            // @ts-expect-error\r\n            let error = new ErrorConstructor(val.message);\r\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\r\n            // because we don't serialize SSR stack traces for security reasons\r\n            error.stack = \"\";\r\n            serialized[key] = error;\r\n          } catch (e) {\r\n            // no-op - fall through and create a normal Error\r\n          }\r\n        }\r\n      }\r\n      if (serialized[key] == null) {\r\n        let error = new Error(val.message);\r\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\r\n        // because we don't serialize SSR stack traces for security reasons\r\n        error.stack = \"\";\r\n        serialized[key] = error;\r\n      }\r\n    } else {\r\n      serialized[key] = val;\r\n    }\r\n  }\r\n  return serialized;\r\n}\r\nconst ViewTransitionContext = /*#__PURE__*/React.createContext({\r\n  isTransitioning: false\r\n});\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  ViewTransitionContext.displayName = \"ViewTransition\";\r\n}\r\nconst FetchersContext = /*#__PURE__*/React.createContext(new Map());\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  FetchersContext.displayName = \"Fetchers\";\r\n}\r\n//#endregion\r\n////////////////////////////////////////////////////////////////////////////////\r\n//#region Components\r\n////////////////////////////////////////////////////////////////////////////////\r\n/**\r\n  Webpack + React 17 fails to compile on any of the following because webpack\r\n  complains that `startTransition` doesn't exist in `React`:\r\n  * import { startTransition } from \"react\"\r\n  * import * as React from from \"react\";\r\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\r\n  * import * as React from from \"react\";\r\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\r\n\r\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\r\n  * import * as React from from \"react\";\r\n    const START_TRANSITION = \"startTransition\";\r\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\r\n\r\n  However, that introduces webpack/terser minification issues in production builds\r\n  in React 18 where minification/obfuscation ends up removing the call of\r\n  React.startTransition entirely from the first half of the ternary.  Grabbing\r\n  this exported reference once up front resolves that issue.\r\n\r\n  See https://github.com/remix-run/react-router/issues/10579\r\n*/\r\nconst START_TRANSITION = \"startTransition\";\r\nconst startTransitionImpl = React[START_TRANSITION];\r\nconst FLUSH_SYNC = \"flushSync\";\r\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\r\nconst USE_ID = \"useId\";\r\nconst useIdImpl = React[USE_ID];\r\nfunction startTransitionSafe(cb) {\r\n  if (startTransitionImpl) {\r\n    startTransitionImpl(cb);\r\n  } else {\r\n    cb();\r\n  }\r\n}\r\nfunction flushSyncSafe(cb) {\r\n  if (flushSyncImpl) {\r\n    flushSyncImpl(cb);\r\n  } else {\r\n    cb();\r\n  }\r\n}\r\nclass Deferred {\r\n  constructor() {\r\n    this.status = \"pending\";\r\n    this.promise = new Promise((resolve, reject) => {\r\n      this.resolve = value => {\r\n        if (this.status === \"pending\") {\r\n          this.status = \"resolved\";\r\n          resolve(value);\r\n        }\r\n      };\r\n      this.reject = reason => {\r\n        if (this.status === \"pending\") {\r\n          this.status = \"rejected\";\r\n          reject(reason);\r\n        }\r\n      };\r\n    });\r\n  }\r\n}\r\n/**\r\n * Given a Remix Router instance, render the appropriate UI\r\n */\r\nfunction RouterProvider(_ref) {\r\n  let {\r\n    fallbackElement,\r\n    router,\r\n    future\r\n  } = _ref;\r\n  let [state, setStateImpl] = React.useState(router.state);\r\n  let [pendingState, setPendingState] = React.useState();\r\n  let [vtContext, setVtContext] = React.useState({\r\n    isTransitioning: false\r\n  });\r\n  let [renderDfd, setRenderDfd] = React.useState();\r\n  let [transition, setTransition] = React.useState();\r\n  let [interruption, setInterruption] = React.useState();\r\n  let fetcherData = React.useRef(new Map());\r\n  let {\r\n    v7_startTransition\r\n  } = future || {};\r\n  let optInStartTransition = React.useCallback(cb => {\r\n    if (v7_startTransition) {\r\n      startTransitionSafe(cb);\r\n    } else {\r\n      cb();\r\n    }\r\n  }, [v7_startTransition]);\r\n  let setState = React.useCallback((newState, _ref2) => {\r\n    let {\r\n      deletedFetchers,\r\n      unstable_flushSync: flushSync,\r\n      unstable_viewTransitionOpts: viewTransitionOpts\r\n    } = _ref2;\r\n    deletedFetchers.forEach(key => fetcherData.current.delete(key));\r\n    newState.fetchers.forEach((fetcher, key) => {\r\n      if (fetcher.data !== undefined) {\r\n        fetcherData.current.set(key, fetcher.data);\r\n      }\r\n    });\r\n    let isViewTransitionUnavailable = router.window == null || typeof router.window.document.startViewTransition !== \"function\";\r\n    // If this isn't a view transition or it's not available in this browser,\r\n    // just update and be done with it\r\n    if (!viewTransitionOpts || isViewTransitionUnavailable) {\r\n      if (flushSync) {\r\n        flushSyncSafe(() => setStateImpl(newState));\r\n      } else {\r\n        optInStartTransition(() => setStateImpl(newState));\r\n      }\r\n      return;\r\n    }\r\n    // flushSync + startViewTransition\r\n    if (flushSync) {\r\n      // Flush through the context to mark DOM elements as transition=ing\r\n      flushSyncSafe(() => {\r\n        // Cancel any pending transitions\r\n        if (transition) {\r\n          renderDfd && renderDfd.resolve();\r\n          transition.skipTransition();\r\n        }\r\n        setVtContext({\r\n          isTransitioning: true,\r\n          flushSync: true,\r\n          currentLocation: viewTransitionOpts.currentLocation,\r\n          nextLocation: viewTransitionOpts.nextLocation\r\n        });\r\n      });\r\n      // Update the DOM\r\n      let t = router.window.document.startViewTransition(() => {\r\n        flushSyncSafe(() => setStateImpl(newState));\r\n      });\r\n      // Clean up after the animation completes\r\n      t.finished.finally(() => {\r\n        flushSyncSafe(() => {\r\n          setRenderDfd(undefined);\r\n          setTransition(undefined);\r\n          setPendingState(undefined);\r\n          setVtContext({\r\n            isTransitioning: false\r\n          });\r\n        });\r\n      });\r\n      flushSyncSafe(() => setTransition(t));\r\n      return;\r\n    }\r\n    // startTransition + startViewTransition\r\n    if (transition) {\r\n      // Interrupting an in-progress transition, cancel and let everything flush\r\n      // out, and then kick off a new transition from the interruption state\r\n      renderDfd && renderDfd.resolve();\r\n      transition.skipTransition();\r\n      setInterruption({\r\n        state: newState,\r\n        currentLocation: viewTransitionOpts.currentLocation,\r\n        nextLocation: viewTransitionOpts.nextLocation\r\n      });\r\n    } else {\r\n      // Completed navigation update with opted-in view transitions, let 'er rip\r\n      setPendingState(newState);\r\n      setVtContext({\r\n        isTransitioning: true,\r\n        flushSync: false,\r\n        currentLocation: viewTransitionOpts.currentLocation,\r\n        nextLocation: viewTransitionOpts.nextLocation\r\n      });\r\n    }\r\n  }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);\r\n  // Need to use a layout effect here so we are subscribed early enough to\r\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\r\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\r\n  // When we start a view transition, create a Deferred we can use for the\r\n  // eventual \"completed\" render\r\n  React.useEffect(() => {\r\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\r\n      setRenderDfd(new Deferred());\r\n    }\r\n  }, [vtContext]);\r\n  // Once the deferred is created, kick off startViewTransition() to update the\r\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\r\n  // happened)\r\n  React.useEffect(() => {\r\n    if (renderDfd && pendingState && router.window) {\r\n      let newState = pendingState;\r\n      let renderPromise = renderDfd.promise;\r\n      let transition = router.window.document.startViewTransition(async () => {\r\n        optInStartTransition(() => setStateImpl(newState));\r\n        await renderPromise;\r\n      });\r\n      transition.finished.finally(() => {\r\n        setRenderDfd(undefined);\r\n        setTransition(undefined);\r\n        setPendingState(undefined);\r\n        setVtContext({\r\n          isTransitioning: false\r\n        });\r\n      });\r\n      setTransition(transition);\r\n    }\r\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\r\n  // When the new location finally renders and is committed to the DOM, this\r\n  // effect will run to resolve the transition\r\n  React.useEffect(() => {\r\n    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {\r\n      renderDfd.resolve();\r\n    }\r\n  }, [renderDfd, transition, state.location, pendingState]);\r\n  // If we get interrupted with a new navigation during a transition, we skip\r\n  // the active transition, let it cleanup, then kick it off again here\r\n  React.useEffect(() => {\r\n    if (!vtContext.isTransitioning && interruption) {\r\n      setPendingState(interruption.state);\r\n      setVtContext({\r\n        isTransitioning: true,\r\n        flushSync: false,\r\n        currentLocation: interruption.currentLocation,\r\n        nextLocation: interruption.nextLocation\r\n      });\r\n      setInterruption(undefined);\r\n    }\r\n  }, [vtContext.isTransitioning, interruption]);\r\n  React.useEffect(() => {\r\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\r\n    // Only log this once on initial mount\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  let navigator = React.useMemo(() => {\r\n    return {\r\n      createHref: router.createHref,\r\n      encodeLocation: router.encodeLocation,\r\n      go: n => router.navigate(n),\r\n      push: (to, state, opts) => router.navigate(to, {\r\n        state,\r\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\r\n      }),\r\n      replace: (to, state, opts) => router.navigate(to, {\r\n        replace: true,\r\n        state,\r\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\r\n      })\r\n    };\r\n  }, [router]);\r\n  let basename = router.basename || \"/\";\r\n  let dataRouterContext = React.useMemo(() => ({\r\n    router,\r\n    navigator,\r\n    static: false,\r\n    basename\r\n  }), [router, navigator, basename]);\r\n  // The fragment and {null} here are important!  We need them to keep React 18's\r\n  // useId happy when we are server-rendering since we may have a <script> here\r\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\r\n  // useId relies on the component tree structure to generate deterministic id's\r\n  // so we need to ensure it remains the same on the client even though\r\n  // we don't need the <script> tag\r\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UNSAFE_DataRouterContext.Provider, {\r\n    value: dataRouterContext\r\n  }, /*#__PURE__*/React.createElement(UNSAFE_DataRouterStateContext.Provider, {\r\n    value: state\r\n  }, /*#__PURE__*/React.createElement(FetchersContext.Provider, {\r\n    value: fetcherData.current\r\n  }, /*#__PURE__*/React.createElement(ViewTransitionContext.Provider, {\r\n    value: vtContext\r\n  }, /*#__PURE__*/React.createElement(Router, {\r\n    basename: basename,\r\n    location: state.location,\r\n    navigationType: state.historyAction,\r\n    navigator: navigator,\r\n    future: {\r\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\r\n    }\r\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(DataRoutes, {\r\n    routes: router.routes,\r\n    future: router.future,\r\n    state: state\r\n  }) : fallbackElement))))), null);\r\n}\r\nfunction DataRoutes(_ref3) {\r\n  let {\r\n    routes,\r\n    future,\r\n    state\r\n  } = _ref3;\r\n  return UNSAFE_useRoutesImpl(routes, undefined, state, future);\r\n}\r\n/**\r\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\r\n */\r\nfunction BrowserRouter(_ref4) {\r\n  let {\r\n    basename,\r\n    children,\r\n    future,\r\n    window\r\n  } = _ref4;\r\n  let historyRef = React.useRef();\r\n  if (historyRef.current == null) {\r\n    historyRef.current = createBrowserHistory({\r\n      window,\r\n      v5Compat: true\r\n    });\r\n  }\r\n  let history = historyRef.current;\r\n  let [state, setStateImpl] = React.useState({\r\n    action: history.action,\r\n    location: history.location\r\n  });\r\n  let {\r\n    v7_startTransition\r\n  } = future || {};\r\n  let setState = React.useCallback(newState => {\r\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\r\n  }, [setStateImpl, v7_startTransition]);\r\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\r\n  return /*#__PURE__*/React.createElement(Router, {\r\n    basename: basename,\r\n    children: children,\r\n    location: state.location,\r\n    navigationType: state.action,\r\n    navigator: history,\r\n    future: future\r\n  });\r\n}\r\n/**\r\n * A `<Router>` for use in web browsers. Stores the location in the hash\r\n * portion of the URL so it is not sent to the server.\r\n */\r\nfunction HashRouter(_ref5) {\r\n  let {\r\n    basename,\r\n    children,\r\n    future,\r\n    window\r\n  } = _ref5;\r\n  let historyRef = React.useRef();\r\n  if (historyRef.current == null) {\r\n    historyRef.current = createHashHistory({\r\n      window,\r\n      v5Compat: true\r\n    });\r\n  }\r\n  let history = historyRef.current;\r\n  let [state, setStateImpl] = React.useState({\r\n    action: history.action,\r\n    location: history.location\r\n  });\r\n  let {\r\n    v7_startTransition\r\n  } = future || {};\r\n  let setState = React.useCallback(newState => {\r\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\r\n  }, [setStateImpl, v7_startTransition]);\r\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\r\n  return /*#__PURE__*/React.createElement(Router, {\r\n    basename: basename,\r\n    children: children,\r\n    location: state.location,\r\n    navigationType: state.action,\r\n    navigator: history,\r\n    future: future\r\n  });\r\n}\r\n/**\r\n * A `<Router>` that accepts a pre-instantiated history object. It's important\r\n * to note that using your own history object is highly discouraged and may add\r\n * two versions of the history library to your bundles unless you use the same\r\n * version of the history library that React Router uses internally.\r\n */\r\nfunction HistoryRouter(_ref6) {\r\n  let {\r\n    basename,\r\n    children,\r\n    future,\r\n    history\r\n  } = _ref6;\r\n  let [state, setStateImpl] = React.useState({\r\n    action: history.action,\r\n    location: history.location\r\n  });\r\n  let {\r\n    v7_startTransition\r\n  } = future || {};\r\n  let setState = React.useCallback(newState => {\r\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\r\n  }, [setStateImpl, v7_startTransition]);\r\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\r\n  return /*#__PURE__*/React.createElement(Router, {\r\n    basename: basename,\r\n    children: children,\r\n    location: state.location,\r\n    navigationType: state.action,\r\n    navigator: history,\r\n    future: future\r\n  });\r\n}\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\r\n}\r\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\r\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\r\n/**\r\n * The public API for rendering a history-aware `<a>`.\r\n */\r\nconst Link = /*#__PURE__*/React.forwardRef(function LinkWithRef(_ref7, ref) {\r\n  let {\r\n      onClick,\r\n      relative,\r\n      reloadDocument,\r\n      replace,\r\n      state,\r\n      target,\r\n      to,\r\n      preventScrollReset,\r\n      unstable_viewTransition\r\n    } = _ref7,\r\n    rest = _objectWithoutPropertiesLoose(_ref7, _excluded);\r\n  let {\r\n    basename\r\n  } = React.useContext(UNSAFE_NavigationContext);\r\n  // Rendered into <a href> for absolute URLs\r\n  let absoluteHref;\r\n  let isExternal = false;\r\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\r\n    // Render the absolute href server- and client-side\r\n    absoluteHref = to;\r\n    // Only check for external origins client-side\r\n    if (isBrowser) {\r\n      try {\r\n        let currentUrl = new URL(window.location.href);\r\n        let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\r\n        let path = stripBasename(targetUrl.pathname, basename);\r\n        if (targetUrl.origin === currentUrl.origin && path != null) {\r\n          // Strip the protocol/origin/basename for same-origin absolute URLs\r\n          to = path + targetUrl.search + targetUrl.hash;\r\n        } else {\r\n          isExternal = true;\r\n        }\r\n      } catch (e) {\r\n        // We can't do external URL detection without a valid URL\r\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\") : void 0;\r\n      }\r\n    }\r\n  }\r\n  // Rendered into <a href> for relative URLs\r\n  let href = useHref(to, {\r\n    relative\r\n  });\r\n  let internalOnClick = useLinkClickHandler(to, {\r\n    replace,\r\n    state,\r\n    target,\r\n    preventScrollReset,\r\n    relative,\r\n    unstable_viewTransition\r\n  });\r\n  function handleClick(event) {\r\n    if (onClick) onClick(event);\r\n    if (!event.defaultPrevented) {\r\n      internalOnClick(event);\r\n    }\r\n  }\r\n  return (\r\n    /*#__PURE__*/\r\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\r\n    React.createElement(\"a\", _extends({}, rest, {\r\n      href: absoluteHref || href,\r\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\r\n      ref: ref,\r\n      target: target\r\n    }))\r\n  );\r\n});\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  Link.displayName = \"Link\";\r\n}\r\n/**\r\n * A `<Link>` wrapper that knows if it's \"active\" or not.\r\n */\r\nconst NavLink = /*#__PURE__*/React.forwardRef(function NavLinkWithRef(_ref8, ref) {\r\n  let {\r\n      \"aria-current\": ariaCurrentProp = \"page\",\r\n      caseSensitive = false,\r\n      className: classNameProp = \"\",\r\n      end = false,\r\n      style: styleProp,\r\n      to,\r\n      unstable_viewTransition,\r\n      children\r\n    } = _ref8,\r\n    rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);\r\n  let path = useResolvedPath(to, {\r\n    relative: rest.relative\r\n  });\r\n  let location = useLocation();\r\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\r\n  let {\r\n    navigator,\r\n    basename\r\n  } = React.useContext(UNSAFE_NavigationContext);\r\n  let isTransitioning = routerState != null &&\r\n  // Conditional usage is OK here because the usage of a data router is static\r\n  // eslint-disable-next-line react-hooks/rules-of-hooks\r\n  useViewTransitionState(path) && unstable_viewTransition === true;\r\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\r\n  let locationPathname = location.pathname;\r\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\r\n  if (!caseSensitive) {\r\n    locationPathname = locationPathname.toLowerCase();\r\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\r\n    toPathname = toPathname.toLowerCase();\r\n  }\r\n  if (nextLocationPathname && basename) {\r\n    nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;\r\n  }\r\n  // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\r\n  // we're looking for a slash _after_ what's in `to`.  For example:\r\n  //\r\n  // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\r\n  // both want to look for a / at index 6 to match URL `/users/matt`\r\n  const endSlashPosition = toPathname !== \"/\" && toPathname.endsWith(\"/\") ? toPathname.length - 1 : toPathname.length;\r\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === \"/\";\r\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\r\n  let renderProps = {\r\n    isActive,\r\n    isPending,\r\n    isTransitioning\r\n  };\r\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\r\n  let className;\r\n  if (typeof classNameProp === \"function\") {\r\n    className = classNameProp(renderProps);\r\n  } else {\r\n    // If the className prop is not a function, we use a default `active`\r\n    // class for <NavLink />s that are active. In v5 `active` was the default\r\n    // value for `activeClassName`, but we are removing that API and can still\r\n    // use the old default behavior for a cleaner upgrade path and keep the\r\n    // simple styling rules working as they currently do.\r\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null, isTransitioning ? \"transitioning\" : null].filter(Boolean).join(\" \");\r\n  }\r\n  let style = typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\r\n  return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\r\n    \"aria-current\": ariaCurrent,\r\n    className: className,\r\n    ref: ref,\r\n    style: style,\r\n    to: to,\r\n    unstable_viewTransition: unstable_viewTransition\r\n  }), typeof children === \"function\" ? children(renderProps) : children);\r\n});\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  NavLink.displayName = \"NavLink\";\r\n}\r\n/**\r\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\r\n * that the interaction with the server is with `fetch` instead of new document\r\n * requests, allowing components to add nicer UX to the page as the form is\r\n * submitted and returns with data.\r\n */\r\nconst Form = /*#__PURE__*/React.forwardRef((_ref9, forwardedRef) => {\r\n  let {\r\n      fetcherKey,\r\n      navigate,\r\n      reloadDocument,\r\n      replace,\r\n      state,\r\n      method = defaultMethod,\r\n      action,\r\n      onSubmit,\r\n      relative,\r\n      preventScrollReset,\r\n      unstable_viewTransition\r\n    } = _ref9,\r\n    props = _objectWithoutPropertiesLoose(_ref9, _excluded3);\r\n  let submit = useSubmit();\r\n  let formAction = useFormAction(action, {\r\n    relative\r\n  });\r\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\r\n  let submitHandler = event => {\r\n    onSubmit && onSubmit(event);\r\n    if (event.defaultPrevented) return;\r\n    event.preventDefault();\r\n    let submitter = event.nativeEvent.submitter;\r\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\r\n    submit(submitter || event.currentTarget, {\r\n      fetcherKey,\r\n      method: submitMethod,\r\n      navigate,\r\n      replace,\r\n      state,\r\n      relative,\r\n      preventScrollReset,\r\n      unstable_viewTransition\r\n    });\r\n  };\r\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\r\n    ref: forwardedRef,\r\n    method: formMethod,\r\n    action: formAction,\r\n    onSubmit: reloadDocument ? onSubmit : submitHandler\r\n  }, props));\r\n});\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  Form.displayName = \"Form\";\r\n}\r\n/**\r\n * This component will emulate the browser's scroll restoration on location\r\n * changes.\r\n */\r\nfunction ScrollRestoration(_ref10) {\r\n  let {\r\n    getKey,\r\n    storageKey\r\n  } = _ref10;\r\n  useScrollRestoration({\r\n    getKey,\r\n    storageKey\r\n  });\r\n  return null;\r\n}\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  ScrollRestoration.displayName = \"ScrollRestoration\";\r\n}\r\n//#endregion\r\n////////////////////////////////////////////////////////////////////////////////\r\n//#region Hooks\r\n////////////////////////////////////////////////////////////////////////////////\r\nvar DataRouterHook;\r\n(function (DataRouterHook) {\r\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\r\n  DataRouterHook[\"UseSubmit\"] = \"useSubmit\";\r\n  DataRouterHook[\"UseSubmitFetcher\"] = \"useSubmitFetcher\";\r\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\r\n  DataRouterHook[\"useViewTransitionState\"] = \"useViewTransitionState\";\r\n})(DataRouterHook || (DataRouterHook = {}));\r\nvar DataRouterStateHook;\r\n(function (DataRouterStateHook) {\r\n  DataRouterStateHook[\"UseFetcher\"] = \"useFetcher\";\r\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\r\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\r\n})(DataRouterStateHook || (DataRouterStateHook = {}));\r\n// Internal hooks\r\nfunction getDataRouterConsoleError(hookName) {\r\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\r\n}\r\nfunction useDataRouterContext(hookName) {\r\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\r\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\r\n  return ctx;\r\n}\r\nfunction useDataRouterState(hookName) {\r\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\r\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\r\n  return state;\r\n}\r\n// External hooks\r\n/**\r\n * Handles the click behavior for router `<Link>` components. This is useful if\r\n * you need to create custom `<Link>` components with the same click behavior we\r\n * use in our exported `<Link>`.\r\n */\r\nfunction useLinkClickHandler(to, _temp) {\r\n  let {\r\n    target,\r\n    replace: replaceProp,\r\n    state,\r\n    preventScrollReset,\r\n    relative,\r\n    unstable_viewTransition\r\n  } = _temp === void 0 ? {} : _temp;\r\n  let navigate = useNavigate();\r\n  let location = useLocation();\r\n  let path = useResolvedPath(to, {\r\n    relative\r\n  });\r\n  return React.useCallback(event => {\r\n    if (shouldProcessLinkClick(event, target)) {\r\n      event.preventDefault();\r\n      // If the URL hasn't changed, a regular <a> will do a replace instead of\r\n      // a push, so do the same here unless the replace prop is explicitly set\r\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\r\n      navigate(to, {\r\n        replace,\r\n        state,\r\n        preventScrollReset,\r\n        relative,\r\n        unstable_viewTransition\r\n      });\r\n    }\r\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, unstable_viewTransition]);\r\n}\r\n/**\r\n * A convenient wrapper for reading and writing search parameters via the\r\n * URLSearchParams interface.\r\n */\r\nfunction useSearchParams(defaultInit) {\r\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params\\n\\n\" + \"If you're unsure how to load polyfills, we recommend you check out \" + \"https://polyfill.io/v3/ which provides some recommendations about how \" + \"to load polyfills only for users that need them, instead of for every \" + \"user.\") : void 0;\r\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\r\n  let hasSetSearchParamsRef = React.useRef(false);\r\n  let location = useLocation();\r\n  let searchParams = React.useMemo(() =>\r\n  // Only merge in the defaults if we haven't yet called setSearchParams.\r\n  // Once we call that we want those to take precedence, otherwise you can't\r\n  // remove a param with setSearchParams({}) if it has an initial value\r\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\r\n  let navigate = useNavigate();\r\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\r\n    const newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\r\n    hasSetSearchParamsRef.current = true;\r\n    navigate(\"?\" + newSearchParams, navigateOptions);\r\n  }, [navigate, searchParams]);\r\n  return [searchParams, setSearchParams];\r\n}\r\nfunction validateClientSideSubmission() {\r\n  if (typeof document === \"undefined\") {\r\n    throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\r\n  }\r\n}\r\nlet fetcherId = 0;\r\nlet getUniqueFetcherId = () => \"__\" + String(++fetcherId) + \"__\";\r\n/**\r\n * Returns a function that may be used to programmatically submit a form (or\r\n * some arbitrary data) to the server.\r\n */\r\nfunction useSubmit() {\r\n  let {\r\n    router\r\n  } = useDataRouterContext(DataRouterHook.UseSubmit);\r\n  let {\r\n    basename\r\n  } = React.useContext(UNSAFE_NavigationContext);\r\n  let currentRouteId = UNSAFE_useRouteId();\r\n  return React.useCallback(function (target, options) {\r\n    if (options === void 0) {\r\n      options = {};\r\n    }\r\n    validateClientSideSubmission();\r\n    let {\r\n      action,\r\n      method,\r\n      encType,\r\n      formData,\r\n      body\r\n    } = getFormSubmissionInfo(target, basename);\r\n    if (options.navigate === false) {\r\n      let key = options.fetcherKey || getUniqueFetcherId();\r\n      router.fetch(key, currentRouteId, options.action || action, {\r\n        preventScrollReset: options.preventScrollReset,\r\n        formData,\r\n        body,\r\n        formMethod: options.method || method,\r\n        formEncType: options.encType || encType,\r\n        unstable_flushSync: options.unstable_flushSync\r\n      });\r\n    } else {\r\n      router.navigate(options.action || action, {\r\n        preventScrollReset: options.preventScrollReset,\r\n        formData,\r\n        body,\r\n        formMethod: options.method || method,\r\n        formEncType: options.encType || encType,\r\n        replace: options.replace,\r\n        state: options.state,\r\n        fromRouteId: currentRouteId,\r\n        unstable_flushSync: options.unstable_flushSync,\r\n        unstable_viewTransition: options.unstable_viewTransition\r\n      });\r\n    }\r\n  }, [router, basename, currentRouteId]);\r\n}\r\n// v7: Eventually we should deprecate this entirely in favor of using the\r\n// router method directly?\r\nfunction useFormAction(action, _temp2) {\r\n  let {\r\n    relative\r\n  } = _temp2 === void 0 ? {} : _temp2;\r\n  let {\r\n    basename\r\n  } = React.useContext(UNSAFE_NavigationContext);\r\n  let routeContext = React.useContext(UNSAFE_RouteContext);\r\n  !routeContext ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\r\n  let [match] = routeContext.matches.slice(-1);\r\n  // Shallow clone path so we can modify it below, otherwise we modify the\r\n  // object referenced by useMemo inside useResolvedPath\r\n  let path = _extends({}, useResolvedPath(action ? action : \".\", {\r\n    relative\r\n  }));\r\n  // If no action was specified, browsers will persist current search params\r\n  // when determining the path, so match that behavior\r\n  // https://github.com/remix-run/remix/issues/927\r\n  let location = useLocation();\r\n  if (action == null) {\r\n    // Safe to write to this directly here since if action was undefined, we\r\n    // would have called useResolvedPath(\".\") which will never include a search\r\n    path.search = location.search;\r\n    // When grabbing search params from the URL, remove any included ?index param\r\n    // since it might not apply to our contextual route.  We add it back based\r\n    // on match.route.index below\r\n    let params = new URLSearchParams(path.search);\r\n    if (params.has(\"index\") && params.get(\"index\") === \"\") {\r\n      params.delete(\"index\");\r\n      path.search = params.toString() ? \"?\" + params.toString() : \"\";\r\n    }\r\n  }\r\n  if ((!action || action === \".\") && match.route.index) {\r\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\r\n  }\r\n  // If we're operating within a basename, prepend it to the pathname prior\r\n  // to creating the form action.  If this is a root navigation, then just use\r\n  // the raw basename which allows the basename to have full control over the\r\n  // presence of a trailing slash on root actions\r\n  if (basename !== \"/\") {\r\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\r\n  }\r\n  return createPath(path);\r\n}\r\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\r\n/**\r\n * Interacts with route loaders and actions without causing a navigation. Great\r\n * for any interaction that stays on the same page.\r\n */\r\nfunction useFetcher(_temp3) {\r\n  var _route$matches;\r\n  let {\r\n    key\r\n  } = _temp3 === void 0 ? {} : _temp3;\r\n  let {\r\n    router\r\n  } = useDataRouterContext(DataRouterHook.UseFetcher);\r\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\r\n  let fetcherData = React.useContext(FetchersContext);\r\n  let route = React.useContext(UNSAFE_RouteContext);\r\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\r\n  !fetcherData ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a FetchersContext\") : UNSAFE_invariant(false) : void 0;\r\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\r\n  !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\r\n  // Fetcher key handling\r\n  // OK to call conditionally to feature detect `useId`\r\n  // eslint-disable-next-line react-hooks/rules-of-hooks\r\n  let defaultKey = useIdImpl ? useIdImpl() : \"\";\r\n  let [fetcherKey, setFetcherKey] = React.useState(key || defaultKey);\r\n  if (key && key !== fetcherKey) {\r\n    setFetcherKey(key);\r\n  } else if (!fetcherKey) {\r\n    // We will only fall through here when `useId` is not available\r\n    setFetcherKey(getUniqueFetcherId());\r\n  }\r\n  // Registration/cleanup\r\n  React.useEffect(() => {\r\n    router.getFetcher(fetcherKey);\r\n    return () => {\r\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\r\n      // will not delete immediately but instead queue up a delete after the\r\n      // fetcher returns to an `idle` state\r\n      router.deleteFetcher(fetcherKey);\r\n    };\r\n  }, [router, fetcherKey]);\r\n  // Fetcher additions\r\n  let load = React.useCallback((href, opts) => {\r\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\r\n    router.fetch(fetcherKey, routeId, href, opts);\r\n  }, [fetcherKey, routeId, router]);\r\n  let submitImpl = useSubmit();\r\n  let submit = React.useCallback((target, opts) => {\r\n    submitImpl(target, _extends({}, opts, {\r\n      navigate: false,\r\n      fetcherKey\r\n    }));\r\n  }, [fetcherKey, submitImpl]);\r\n  let FetcherForm = React.useMemo(() => {\r\n    let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\r\n      return /*#__PURE__*/React.createElement(Form, _extends({}, props, {\r\n        navigate: false,\r\n        fetcherKey: fetcherKey,\r\n        ref: ref\r\n      }));\r\n    });\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n      FetcherForm.displayName = \"fetcher.Form\";\r\n    }\r\n    return FetcherForm;\r\n  }, [fetcherKey]);\r\n  // Exposed FetcherWithComponents\r\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\r\n  let data = fetcherData.get(fetcherKey);\r\n  let fetcherWithComponents = React.useMemo(() => _extends({\r\n    Form: FetcherForm,\r\n    submit,\r\n    load\r\n  }, fetcher, {\r\n    data\r\n  }), [FetcherForm, submit, load, fetcher, data]);\r\n  return fetcherWithComponents;\r\n}\r\n/**\r\n * Provides all fetchers currently on the page. Useful for layouts and parent\r\n * routes that need to provide pending/optimistic UI regarding the fetch.\r\n */\r\nfunction useFetchers() {\r\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\r\n  return Array.from(state.fetchers.entries()).map(_ref11 => {\r\n    let [key, fetcher] = _ref11;\r\n    return _extends({}, fetcher, {\r\n      key\r\n    });\r\n  });\r\n}\r\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\r\nlet savedScrollPositions = {};\r\n/**\r\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\r\n */\r\nfunction useScrollRestoration(_temp4) {\r\n  let {\r\n    getKey,\r\n    storageKey\r\n  } = _temp4 === void 0 ? {} : _temp4;\r\n  let {\r\n    router\r\n  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\r\n  let {\r\n    restoreScrollPosition,\r\n    preventScrollReset\r\n  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);\r\n  let {\r\n    basename\r\n  } = React.useContext(UNSAFE_NavigationContext);\r\n  let location = useLocation();\r\n  let matches = useMatches();\r\n  let navigation = useNavigation();\r\n  // Trigger manual scroll restoration while we're active\r\n  React.useEffect(() => {\r\n    window.history.scrollRestoration = \"manual\";\r\n    return () => {\r\n      window.history.scrollRestoration = \"auto\";\r\n    };\r\n  }, []);\r\n  // Save positions on pagehide\r\n  usePageHide(React.useCallback(() => {\r\n    if (navigation.state === \"idle\") {\r\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\r\n      savedScrollPositions[key] = window.scrollY;\r\n    }\r\n    try {\r\n      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\r\n    } catch (error) {\r\n      process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (\" + error + \").\") : void 0;\r\n    }\r\n    window.history.scrollRestoration = \"auto\";\r\n  }, [storageKey, getKey, navigation.state, location, matches]));\r\n  // Read in any saved scroll locations\r\n  if (typeof document !== \"undefined\") {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    React.useLayoutEffect(() => {\r\n      try {\r\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\r\n        if (sessionPositions) {\r\n          savedScrollPositions = JSON.parse(sessionPositions);\r\n        }\r\n      } catch (e) {\r\n        // no-op, use default empty object\r\n      }\r\n    }, [storageKey]);\r\n    // Enable scroll restoration in the router\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    React.useLayoutEffect(() => {\r\n      let getKeyWithoutBasename = getKey && basename !== \"/\" ? (location, matches) => getKey( // Strip the basename to match useLocation()\r\n      _extends({}, location, {\r\n        pathname: stripBasename(location.pathname, basename) || location.pathname\r\n      }), matches) : getKey;\r\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);\r\n      return () => disableScrollRestoration && disableScrollRestoration();\r\n    }, [router, basename, getKey]);\r\n    // Restore scrolling when state.restoreScrollPosition changes\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    React.useLayoutEffect(() => {\r\n      // Explicit false means don't do anything (used for submissions)\r\n      if (restoreScrollPosition === false) {\r\n        return;\r\n      }\r\n      // been here before, scroll to it\r\n      if (typeof restoreScrollPosition === \"number\") {\r\n        window.scrollTo(0, restoreScrollPosition);\r\n        return;\r\n      }\r\n      // try to scroll to the hash\r\n      if (location.hash) {\r\n        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\r\n        if (el) {\r\n          el.scrollIntoView();\r\n          return;\r\n        }\r\n      }\r\n      // Don't reset if this navigation opted out\r\n      if (preventScrollReset === true) {\r\n        return;\r\n      }\r\n      // otherwise go to the top on new locations\r\n      window.scrollTo(0, 0);\r\n    }, [location, restoreScrollPosition, preventScrollReset]);\r\n  }\r\n}\r\n/**\r\n * Setup a callback to be fired on the window's `beforeunload` event. This is\r\n * useful for saving some data to `window.localStorage` just before the page\r\n * refreshes.\r\n *\r\n * Note: The `callback` argument should be a function created with\r\n * `React.useCallback()`.\r\n */\r\nfunction useBeforeUnload(callback, options) {\r\n  let {\r\n    capture\r\n  } = options || {};\r\n  React.useEffect(() => {\r\n    let opts = capture != null ? {\r\n      capture\r\n    } : undefined;\r\n    window.addEventListener(\"beforeunload\", callback, opts);\r\n    return () => {\r\n      window.removeEventListener(\"beforeunload\", callback, opts);\r\n    };\r\n  }, [callback, capture]);\r\n}\r\n/**\r\n * Setup a callback to be fired on the window's `pagehide` event. This is\r\n * useful for saving some data to `window.localStorage` just before the page\r\n * refreshes.  This event is better supported than beforeunload across browsers.\r\n *\r\n * Note: The `callback` argument should be a function created with\r\n * `React.useCallback()`.\r\n */\r\nfunction usePageHide(callback, options) {\r\n  let {\r\n    capture\r\n  } = options || {};\r\n  React.useEffect(() => {\r\n    let opts = capture != null ? {\r\n      capture\r\n    } : undefined;\r\n    window.addEventListener(\"pagehide\", callback, opts);\r\n    return () => {\r\n      window.removeEventListener(\"pagehide\", callback, opts);\r\n    };\r\n  }, [callback, capture]);\r\n}\r\n/**\r\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\r\n * of building a custom UI with useBlocker.\r\n *\r\n * Warning: This has *a lot of rough edges* and behaves very differently (and\r\n * very incorrectly in some cases) across browsers if user click addition\r\n * back/forward navigations while the confirm is open.  Use at your own risk.\r\n */\r\nfunction usePrompt(_ref12) {\r\n  let {\r\n    when,\r\n    message\r\n  } = _ref12;\r\n  let blocker = useBlocker(when);\r\n  React.useEffect(() => {\r\n    if (blocker.state === \"blocked\") {\r\n      let proceed = window.confirm(message);\r\n      if (proceed) {\r\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\r\n        // between the `window.history` revert navigation and the result of\r\n        // `window.confirm`\r\n        setTimeout(blocker.proceed, 0);\r\n      } else {\r\n        blocker.reset();\r\n      }\r\n    }\r\n  }, [blocker, message]);\r\n  React.useEffect(() => {\r\n    if (blocker.state === \"blocked\" && !when) {\r\n      blocker.reset();\r\n    }\r\n  }, [blocker, when]);\r\n}\r\n/**\r\n * Return a boolean indicating if there is an active view transition to the\r\n * given href.  You can use this value to render CSS classes or viewTransitionName\r\n * styles onto your elements\r\n *\r\n * @param href The destination href\r\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\r\n */\r\nfunction useViewTransitionState(to, opts) {\r\n  if (opts === void 0) {\r\n    opts = {};\r\n  }\r\n  let vtContext = React.useContext(ViewTransitionContext);\r\n  !(vtContext != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" + \"Did you accidentally import `RouterProvider` from `react-router`?\") : UNSAFE_invariant(false) : void 0;\r\n  let {\r\n    basename\r\n  } = useDataRouterContext(DataRouterHook.useViewTransitionState);\r\n  let path = useResolvedPath(to, {\r\n    relative: opts.relative\r\n  });\r\n  if (!vtContext.isTransitioning) {\r\n    return false;\r\n  }\r\n  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;\r\n  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;\r\n  // Transition is active if we're going to or coming from the indicated\r\n  // destination.  This ensures that other PUSH navigations that reverse\r\n  // an indicated transition apply.  I.e., on the list view you have:\r\n  //\r\n  //   <NavLink to=\"/details/1\" unstable_viewTransition>\r\n  //\r\n  // If you click the breadcrumb back to the list view:\r\n  //\r\n  //   <NavLink to=\"/list\" unstable_viewTransition>\r\n  //\r\n  // We should apply the transition because it's indicated as active going\r\n  // from /list -> /details/1 and therefore should be active on the reverse\r\n  // (even though this isn't strictly a POP reverse)\r\n  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;\r\n}\r\n//#endregion\r\n\r\nexport { BrowserRouter, Form, HashRouter, Link, NavLink, RouterProvider, ScrollRestoration, FetchersContext as UNSAFE_FetchersContext, ViewTransitionContext as UNSAFE_ViewTransitionContext, useScrollRestoration as UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, HistoryRouter as unstable_HistoryRouter, usePrompt as unstable_usePrompt, useViewTransitionState as unstable_useViewTransitionState, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit };\r\n//# sourceMappingURL=index.js.map\r\n", "/**\r\n * React Router v6.22.3\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\r\nimport * as React from 'react';\r\nimport { UNSAFE_invariant, joinPaths, matchPath, UNSAFE_getResolveToMatches, UNSAFE_warning, resolveTo, parsePath, matchRoutes, Action, UNSAFE_convertRouteMatchToUiMatch, stripBasename, IDLE_BLOCKER, isRouteErrorResponse, createMemoryHistory, AbortedDeferredError, createRouter } from '@remix-run/router';\r\nexport { AbortedDeferredError, Action as NavigationType, createPath, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, resolvePath } from '@remix-run/router';\r\n\r\nfunction _extends() {\r\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i];\r\n      for (var key in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  };\r\n  return _extends.apply(this, arguments);\r\n}\r\n\r\n// Create react-specific types from the agnostic types in @remix-run/router to\r\n// export from react-router\r\nconst DataRouterContext = /*#__PURE__*/React.createContext(null);\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  DataRouterContext.displayName = \"DataRouter\";\r\n}\r\nconst DataRouterStateContext = /*#__PURE__*/React.createContext(null);\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  DataRouterStateContext.displayName = \"DataRouterState\";\r\n}\r\nconst AwaitContext = /*#__PURE__*/React.createContext(null);\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  AwaitContext.displayName = \"Await\";\r\n}\r\n\r\n/**\r\n * A Navigator is a \"location changer\"; it's how you get to different locations.\r\n *\r\n * Every history instance conforms to the Navigator interface, but the\r\n * distinction is useful primarily when it comes to the low-level `<Router>` API\r\n * where both the location and a navigator must be provided separately in order\r\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\r\n * and/or location were to be read directly from the history instance.\r\n */\r\n\r\nconst NavigationContext = /*#__PURE__*/React.createContext(null);\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  NavigationContext.displayName = \"Navigation\";\r\n}\r\nconst LocationContext = /*#__PURE__*/React.createContext(null);\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  LocationContext.displayName = \"Location\";\r\n}\r\nconst RouteContext = /*#__PURE__*/React.createContext({\r\n  outlet: null,\r\n  matches: [],\r\n  isDataRoute: false\r\n});\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  RouteContext.displayName = \"Route\";\r\n}\r\nconst RouteErrorContext = /*#__PURE__*/React.createContext(null);\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  RouteErrorContext.displayName = \"RouteError\";\r\n}\r\n\r\n/**\r\n * Returns the full href for the given \"to\" value. This is useful for building\r\n * custom links that are also accessible and preserve right-click behavior.\r\n *\r\n * @see https://reactrouter.com/hooks/use-href\r\n */\r\nfunction useHref(to, _temp) {\r\n  let {\r\n    relative\r\n  } = _temp === void 0 ? {} : _temp;\r\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\r\n  // router loaded. We can help them understand how to avoid that.\r\n  \"useHref() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\r\n  let {\r\n    basename,\r\n    navigator\r\n  } = React.useContext(NavigationContext);\r\n  let {\r\n    hash,\r\n    pathname,\r\n    search\r\n  } = useResolvedPath(to, {\r\n    relative\r\n  });\r\n  let joinedPathname = pathname;\r\n\r\n  // If we're operating within a basename, prepend it to the pathname prior\r\n  // to creating the href.  If this is a root navigation, then just use the raw\r\n  // basename which allows the basename to have full control over the presence\r\n  // of a trailing slash on root links\r\n  if (basename !== \"/\") {\r\n    joinedPathname = pathname === \"/\" ? basename : joinPaths([basename, pathname]);\r\n  }\r\n  return navigator.createHref({\r\n    pathname: joinedPathname,\r\n    search,\r\n    hash\r\n  });\r\n}\r\n\r\n/**\r\n * Returns true if this component is a descendant of a `<Router>`.\r\n *\r\n * @see https://reactrouter.com/hooks/use-in-router-context\r\n */\r\nfunction useInRouterContext() {\r\n  return React.useContext(LocationContext) != null;\r\n}\r\n\r\n/**\r\n * Returns the current location object, which represents the current URL in web\r\n * browsers.\r\n *\r\n * Note: If you're using this it may mean you're doing some of your own\r\n * \"routing\" in your app, and we'd like to know what your use case is. We may\r\n * be able to provide something higher-level to better suit your needs.\r\n *\r\n * @see https://reactrouter.com/hooks/use-location\r\n */\r\nfunction useLocation() {\r\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\r\n  // router loaded. We can help them understand how to avoid that.\r\n  \"useLocation() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\r\n  return React.useContext(LocationContext).location;\r\n}\r\n\r\n/**\r\n * Returns the current navigation action which describes how the router came to\r\n * the current location, either by a pop, push, or replace on the history stack.\r\n *\r\n * @see https://reactrouter.com/hooks/use-navigation-type\r\n */\r\nfunction useNavigationType() {\r\n  return React.useContext(LocationContext).navigationType;\r\n}\r\n\r\n/**\r\n * Returns a PathMatch object if the given pattern matches the current URL.\r\n * This is useful for components that need to know \"active\" state, e.g.\r\n * `<NavLink>`.\r\n *\r\n * @see https://reactrouter.com/hooks/use-match\r\n */\r\nfunction useMatch(pattern) {\r\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\r\n  // router loaded. We can help them understand how to avoid that.\r\n  \"useMatch() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\r\n  let {\r\n    pathname\r\n  } = useLocation();\r\n  return React.useMemo(() => matchPath(pattern, pathname), [pathname, pattern]);\r\n}\r\n\r\n/**\r\n * The interface for the navigate() function returned from useNavigate().\r\n */\r\n\r\nconst navigateEffectWarning = \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\";\r\n\r\n// Mute warnings for calls to useNavigate in SSR environments\r\nfunction useIsomorphicLayoutEffect(cb) {\r\n  let isStatic = React.useContext(NavigationContext).static;\r\n  if (!isStatic) {\r\n    // We should be able to get rid of this once react 18.3 is released\r\n    // See: https://github.com/facebook/react/pull/26395\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    React.useLayoutEffect(cb);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns an imperative method for changing the location. Used by `<Link>`s, but\r\n * may also be used by other elements to change the location.\r\n *\r\n * @see https://reactrouter.com/hooks/use-navigate\r\n */\r\nfunction useNavigate() {\r\n  let {\r\n    isDataRoute\r\n  } = React.useContext(RouteContext);\r\n  // Conditional usage is OK here because the usage of a data router is static\r\n  // eslint-disable-next-line react-hooks/rules-of-hooks\r\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\r\n}\r\nfunction useNavigateUnstable() {\r\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\r\n  // router loaded. We can help them understand how to avoid that.\r\n  \"useNavigate() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\r\n  let dataRouterContext = React.useContext(DataRouterContext);\r\n  let {\r\n    basename,\r\n    future,\r\n    navigator\r\n  } = React.useContext(NavigationContext);\r\n  let {\r\n    matches\r\n  } = React.useContext(RouteContext);\r\n  let {\r\n    pathname: locationPathname\r\n  } = useLocation();\r\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\r\n  let activeRef = React.useRef(false);\r\n  useIsomorphicLayoutEffect(() => {\r\n    activeRef.current = true;\r\n  });\r\n  let navigate = React.useCallback(function (to, options) {\r\n    if (options === void 0) {\r\n      options = {};\r\n    }\r\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\r\n\r\n    // Short circuit here since if this happens on first render the navigate\r\n    // is useless because we haven't wired up our history listener yet\r\n    if (!activeRef.current) return;\r\n    if (typeof to === \"number\") {\r\n      navigator.go(to);\r\n      return;\r\n    }\r\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === \"path\");\r\n\r\n    // If we're operating within a basename, prepend it to the pathname prior\r\n    // to handing off to history (but only if we're not in a data router,\r\n    // otherwise it'll prepend the basename inside of the router).\r\n    // If this is a root navigation, then we navigate to the raw basename\r\n    // which allows the basename to have full control over the presence of a\r\n    // trailing slash on root links\r\n    if (dataRouterContext == null && basename !== \"/\") {\r\n      path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\r\n    }\r\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);\r\n  }, [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext]);\r\n  return navigate;\r\n}\r\nconst OutletContext = /*#__PURE__*/React.createContext(null);\r\n\r\n/**\r\n * Returns the context (if provided) for the child route at this level of the route\r\n * hierarchy.\r\n * @see https://reactrouter.com/hooks/use-outlet-context\r\n */\r\nfunction useOutletContext() {\r\n  return React.useContext(OutletContext);\r\n}\r\n\r\n/**\r\n * Returns the element for the child route at this level of the route\r\n * hierarchy. Used internally by `<Outlet>` to render child routes.\r\n *\r\n * @see https://reactrouter.com/hooks/use-outlet\r\n */\r\nfunction useOutlet(context) {\r\n  let outlet = React.useContext(RouteContext).outlet;\r\n  if (outlet) {\r\n    return /*#__PURE__*/React.createElement(OutletContext.Provider, {\r\n      value: context\r\n    }, outlet);\r\n  }\r\n  return outlet;\r\n}\r\n\r\n/**\r\n * Returns an object of key/value pairs of the dynamic params from the current\r\n * URL that were matched by the route path.\r\n *\r\n * @see https://reactrouter.com/hooks/use-params\r\n */\r\nfunction useParams() {\r\n  let {\r\n    matches\r\n  } = React.useContext(RouteContext);\r\n  let routeMatch = matches[matches.length - 1];\r\n  return routeMatch ? routeMatch.params : {};\r\n}\r\n\r\n/**\r\n * Resolves the pathname of the given `to` value against the current location.\r\n *\r\n * @see https://reactrouter.com/hooks/use-resolved-path\r\n */\r\nfunction useResolvedPath(to, _temp2) {\r\n  let {\r\n    relative\r\n  } = _temp2 === void 0 ? {} : _temp2;\r\n  let {\r\n    future\r\n  } = React.useContext(NavigationContext);\r\n  let {\r\n    matches\r\n  } = React.useContext(RouteContext);\r\n  let {\r\n    pathname: locationPathname\r\n  } = useLocation();\r\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\r\n  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === \"path\"), [to, routePathnamesJson, locationPathname, relative]);\r\n}\r\n\r\n/**\r\n * Returns the element of the route that matched the current location, prepared\r\n * with the correct context to render the remainder of the route tree. Route\r\n * elements in the tree must render an `<Outlet>` to render their child route's\r\n * element.\r\n *\r\n * @see https://reactrouter.com/hooks/use-routes\r\n */\r\nfunction useRoutes(routes, locationArg) {\r\n  return useRoutesImpl(routes, locationArg);\r\n}\r\n\r\n// Internal implementation with accept optional param for RouterProvider usage\r\nfunction useRoutesImpl(routes, locationArg, dataRouterState, future) {\r\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\r\n  // router loaded. We can help them understand how to avoid that.\r\n  \"useRoutes() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\r\n  let {\r\n    navigator\r\n  } = React.useContext(NavigationContext);\r\n  let {\r\n    matches: parentMatches\r\n  } = React.useContext(RouteContext);\r\n  let routeMatch = parentMatches[parentMatches.length - 1];\r\n  let parentParams = routeMatch ? routeMatch.params : {};\r\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\r\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\r\n  let parentRoute = routeMatch && routeMatch.route;\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    // You won't get a warning about 2 different <Routes> under a <Route>\r\n    // without a trailing *, but this is a best-effort warning anyway since we\r\n    // cannot even give the warning unless they land at the parent route.\r\n    //\r\n    // Example:\r\n    //\r\n    // <Routes>\r\n    //   {/* This route path MUST end with /* because otherwise\r\n    //       it will never match /blog/post/123 */}\r\n    //   <Route path=\"blog\" element={<Blog />} />\r\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\r\n    // </Routes>\r\n    //\r\n    // function Blog() {\r\n    //   return (\r\n    //     <Routes>\r\n    //       <Route path=\"post/:id\" element={<Post />} />\r\n    //     </Routes>\r\n    //   );\r\n    // }\r\n    let parentPath = parentRoute && parentRoute.path || \"\";\r\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\r\n  }\r\n  let locationFromContext = useLocation();\r\n  let location;\r\n  if (locationArg) {\r\n    var _parsedLocationArg$pa;\r\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\r\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : UNSAFE_invariant(false) : void 0;\r\n    location = parsedLocationArg;\r\n  } else {\r\n    location = locationFromContext;\r\n  }\r\n  let pathname = location.pathname || \"/\";\r\n  let remainingPathname = pathname;\r\n  if (parentPathnameBase !== \"/\") {\r\n    // Determine the remaining pathname by removing the # of URL segments the\r\n    // parentPathnameBase has, instead of removing based on character count.\r\n    // This is because we can't guarantee that incoming/outgoing encodings/\r\n    // decodings will match exactly.\r\n    // We decode paths before matching on a per-segment basis with\r\n    // decodeURIComponent(), but we re-encode pathnames via `new URL()` so they\r\n    // match what `window.location.pathname` would reflect.  Those don't 100%\r\n    // align when it comes to encoded URI characters such as % and &.\r\n    //\r\n    // So we may end up with:\r\n    //   pathname:           \"/descendant/a%25b/match\"\r\n    //   parentPathnameBase: \"/descendant/a%b\"\r\n    //\r\n    // And the direct substring removal approach won't work :/\r\n    let parentSegments = parentPathnameBase.replace(/^\\//, \"\").split(\"/\");\r\n    let segments = pathname.replace(/^\\//, \"\").split(\"/\");\r\n    remainingPathname = \"/\" + segments.slice(parentSegments.length).join(\"/\");\r\n  }\r\n  let matches = matchRoutes(routes, {\r\n    pathname: remainingPathname\r\n  });\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\r\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(matches == null || matches[matches.length - 1].route.element !== undefined || matches[matches.length - 1].route.Component !== undefined || matches[matches.length - 1].route.lazy !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \" + \"does not have an element or Component. This means it will render an <Outlet /> with a \" + \"null value by default resulting in an \\\"empty\\\" page.\") : void 0;\r\n  }\r\n  let renderedMatches = _renderMatches(matches && matches.map(match => Object.assign({}, match, {\r\n    params: Object.assign({}, parentParams, match.params),\r\n    pathname: joinPaths([parentPathnameBase,\r\n    // Re-encode pathnames that were decoded inside matchRoutes\r\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),\r\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase,\r\n    // Re-encode pathnames that were decoded inside matchRoutes\r\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])\r\n  })), parentMatches, dataRouterState, future);\r\n\r\n  // When a user passes in a `locationArg`, the associated routes need to\r\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\r\n  // to use the scoped location instead of the global location.\r\n  if (locationArg && renderedMatches) {\r\n    return /*#__PURE__*/React.createElement(LocationContext.Provider, {\r\n      value: {\r\n        location: _extends({\r\n          pathname: \"/\",\r\n          search: \"\",\r\n          hash: \"\",\r\n          state: null,\r\n          key: \"default\"\r\n        }, location),\r\n        navigationType: Action.Pop\r\n      }\r\n    }, renderedMatches);\r\n  }\r\n  return renderedMatches;\r\n}\r\nfunction DefaultErrorComponent() {\r\n  let error = useRouteError();\r\n  let message = isRouteErrorResponse(error) ? error.status + \" \" + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);\r\n  let stack = error instanceof Error ? error.stack : null;\r\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\r\n  let preStyles = {\r\n    padding: \"0.5rem\",\r\n    backgroundColor: lightgrey\r\n  };\r\n  let codeStyles = {\r\n    padding: \"2px 4px\",\r\n    backgroundColor: lightgrey\r\n  };\r\n  let devInfo = null;\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    console.error(\"Error handled by React Router default ErrorBoundary:\", error);\r\n    devInfo = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, \"\\uD83D\\uDCBF Hey developer \\uD83D\\uDC4B\"), /*#__PURE__*/React.createElement(\"p\", null, \"You can provide a way better UX than this when your app throws errors by providing your own \", /*#__PURE__*/React.createElement(\"code\", {\r\n      style: codeStyles\r\n    }, \"ErrorBoundary\"), \" or\", \" \", /*#__PURE__*/React.createElement(\"code\", {\r\n      style: codeStyles\r\n    }, \"errorElement\"), \" prop on your route.\"));\r\n  }\r\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Unexpected Application Error!\"), /*#__PURE__*/React.createElement(\"h3\", {\r\n    style: {\r\n      fontStyle: \"italic\"\r\n    }\r\n  }, message), stack ? /*#__PURE__*/React.createElement(\"pre\", {\r\n    style: preStyles\r\n  }, stack) : null, devInfo);\r\n}\r\nconst defaultErrorElement = /*#__PURE__*/React.createElement(DefaultErrorComponent, null);\r\nclass RenderErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      location: props.location,\r\n      revalidation: props.revalidation,\r\n      error: props.error\r\n    };\r\n  }\r\n  static getDerivedStateFromError(error) {\r\n    return {\r\n      error: error\r\n    };\r\n  }\r\n  static getDerivedStateFromProps(props, state) {\r\n    // When we get into an error state, the user will likely click \"back\" to the\r\n    // previous page that didn't have an error. Because this wraps the entire\r\n    // application, that will have no effect--the error page continues to display.\r\n    // This gives us a mechanism to recover from the error when the location changes.\r\n    //\r\n    // Whether we're in an error state or not, we update the location in state\r\n    // so that when we are in an error state, it gets reset when a new location\r\n    // comes in and the user recovers from the error.\r\n    if (state.location !== props.location || state.revalidation !== \"idle\" && props.revalidation === \"idle\") {\r\n      return {\r\n        error: props.error,\r\n        location: props.location,\r\n        revalidation: props.revalidation\r\n      };\r\n    }\r\n\r\n    // If we're not changing locations, preserve the location but still surface\r\n    // any new errors that may come through. We retain the existing error, we do\r\n    // this because the error provided from the app state may be cleared without\r\n    // the location changing.\r\n    return {\r\n      error: props.error !== undefined ? props.error : state.error,\r\n      location: state.location,\r\n      revalidation: props.revalidation || state.revalidation\r\n    };\r\n  }\r\n  componentDidCatch(error, errorInfo) {\r\n    console.error(\"React Router caught the following error during render\", error, errorInfo);\r\n  }\r\n  render() {\r\n    return this.state.error !== undefined ? /*#__PURE__*/React.createElement(RouteContext.Provider, {\r\n      value: this.props.routeContext\r\n    }, /*#__PURE__*/React.createElement(RouteErrorContext.Provider, {\r\n      value: this.state.error,\r\n      children: this.props.component\r\n    })) : this.props.children;\r\n  }\r\n}\r\nfunction RenderedRoute(_ref) {\r\n  let {\r\n    routeContext,\r\n    match,\r\n    children\r\n  } = _ref;\r\n  let dataRouterContext = React.useContext(DataRouterContext);\r\n\r\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\r\n  // in a DataStaticRouter\r\n  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\r\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\r\n  }\r\n  return /*#__PURE__*/React.createElement(RouteContext.Provider, {\r\n    value: routeContext\r\n  }, children);\r\n}\r\nfunction _renderMatches(matches, parentMatches, dataRouterState, future) {\r\n  var _dataRouterState2;\r\n  if (parentMatches === void 0) {\r\n    parentMatches = [];\r\n  }\r\n  if (dataRouterState === void 0) {\r\n    dataRouterState = null;\r\n  }\r\n  if (future === void 0) {\r\n    future = null;\r\n  }\r\n  if (matches == null) {\r\n    var _dataRouterState;\r\n    if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {\r\n      // Don't bail if we have data router errors so we can render them in the\r\n      // boundary.  Use the pre-matched (or shimmed) matches\r\n      matches = dataRouterState.matches;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  let renderedMatches = matches;\r\n\r\n  // If we have data errors, trim matches to the highest error boundary\r\n  let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;\r\n  if (errors != null) {\r\n    let errorIndex = renderedMatches.findIndex(m => m.route.id && (errors == null ? void 0 : errors[m.route.id]));\r\n    !(errorIndex >= 0) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"Could not find a matching route for errors on route IDs: \" + Object.keys(errors).join(\",\")) : UNSAFE_invariant(false) : void 0;\r\n    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));\r\n  }\r\n\r\n  // If we're in a partial hydration mode, detect if we need to render down to\r\n  // a given HydrateFallback while we load the rest of the hydration data\r\n  let renderFallback = false;\r\n  let fallbackIndex = -1;\r\n  if (dataRouterState && future && future.v7_partialHydration) {\r\n    for (let i = 0; i < renderedMatches.length; i++) {\r\n      let match = renderedMatches[i];\r\n      // Track the deepest fallback up until the first route without data\r\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\r\n        fallbackIndex = i;\r\n      }\r\n      if (match.route.id) {\r\n        let {\r\n          loaderData,\r\n          errors\r\n        } = dataRouterState;\r\n        let needsToRunLoader = match.route.loader && loaderData[match.route.id] === undefined && (!errors || errors[match.route.id] === undefined);\r\n        if (match.route.lazy || needsToRunLoader) {\r\n          // We found the first route that's not ready to render (waiting on\r\n          // lazy, or has a loader that hasn't run yet).  Flag that we need to\r\n          // render a fallback and render up until the appropriate fallback\r\n          renderFallback = true;\r\n          if (fallbackIndex >= 0) {\r\n            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\r\n          } else {\r\n            renderedMatches = [renderedMatches[0]];\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return renderedMatches.reduceRight((outlet, match, index) => {\r\n    // Only data routers handle errors/fallbacks\r\n    let error;\r\n    let shouldRenderHydrateFallback = false;\r\n    let errorElement = null;\r\n    let hydrateFallbackElement = null;\r\n    if (dataRouterState) {\r\n      error = errors && match.route.id ? errors[match.route.id] : undefined;\r\n      errorElement = match.route.errorElement || defaultErrorElement;\r\n      if (renderFallback) {\r\n        if (fallbackIndex < 0 && index === 0) {\r\n          warningOnce(\"route-fallback\", false, \"No `HydrateFallback` element provided to render during initial hydration\");\r\n          shouldRenderHydrateFallback = true;\r\n          hydrateFallbackElement = null;\r\n        } else if (fallbackIndex === index) {\r\n          shouldRenderHydrateFallback = true;\r\n          hydrateFallbackElement = match.route.hydrateFallbackElement || null;\r\n        }\r\n      }\r\n    }\r\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\r\n    let getChildren = () => {\r\n      let children;\r\n      if (error) {\r\n        children = errorElement;\r\n      } else if (shouldRenderHydrateFallback) {\r\n        children = hydrateFallbackElement;\r\n      } else if (match.route.Component) {\r\n        // Note: This is a de-optimized path since React won't re-use the\r\n        // ReactElement since it's identity changes with each new\r\n        // React.createElement call.  We keep this so folks can use\r\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\r\n        // usage is only advised in `RouterProvider` when we can convert it to\r\n        // `element` ahead of time.\r\n        children = /*#__PURE__*/React.createElement(match.route.Component, null);\r\n      } else if (match.route.element) {\r\n        children = match.route.element;\r\n      } else {\r\n        children = outlet;\r\n      }\r\n      return /*#__PURE__*/React.createElement(RenderedRoute, {\r\n        match: match,\r\n        routeContext: {\r\n          outlet,\r\n          matches,\r\n          isDataRoute: dataRouterState != null\r\n        },\r\n        children: children\r\n      });\r\n    };\r\n    // Only wrap in an error boundary within data router usages when we have an\r\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\r\n    // an ancestor ErrorBoundary/errorElement\r\n    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/React.createElement(RenderErrorBoundary, {\r\n      location: dataRouterState.location,\r\n      revalidation: dataRouterState.revalidation,\r\n      component: errorElement,\r\n      error: error,\r\n      children: getChildren(),\r\n      routeContext: {\r\n        outlet: null,\r\n        matches,\r\n        isDataRoute: true\r\n      }\r\n    }) : getChildren();\r\n  }, null);\r\n}\r\nvar DataRouterHook = /*#__PURE__*/function (DataRouterHook) {\r\n  DataRouterHook[\"UseBlocker\"] = \"useBlocker\";\r\n  DataRouterHook[\"UseRevalidator\"] = \"useRevalidator\";\r\n  DataRouterHook[\"UseNavigateStable\"] = \"useNavigate\";\r\n  return DataRouterHook;\r\n}(DataRouterHook || {});\r\nvar DataRouterStateHook = /*#__PURE__*/function (DataRouterStateHook) {\r\n  DataRouterStateHook[\"UseBlocker\"] = \"useBlocker\";\r\n  DataRouterStateHook[\"UseLoaderData\"] = \"useLoaderData\";\r\n  DataRouterStateHook[\"UseActionData\"] = \"useActionData\";\r\n  DataRouterStateHook[\"UseRouteError\"] = \"useRouteError\";\r\n  DataRouterStateHook[\"UseNavigation\"] = \"useNavigation\";\r\n  DataRouterStateHook[\"UseRouteLoaderData\"] = \"useRouteLoaderData\";\r\n  DataRouterStateHook[\"UseMatches\"] = \"useMatches\";\r\n  DataRouterStateHook[\"UseRevalidator\"] = \"useRevalidator\";\r\n  DataRouterStateHook[\"UseNavigateStable\"] = \"useNavigate\";\r\n  DataRouterStateHook[\"UseRouteId\"] = \"useRouteId\";\r\n  return DataRouterStateHook;\r\n}(DataRouterStateHook || {});\r\nfunction getDataRouterConsoleError(hookName) {\r\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\r\n}\r\nfunction useDataRouterContext(hookName) {\r\n  let ctx = React.useContext(DataRouterContext);\r\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\r\n  return ctx;\r\n}\r\nfunction useDataRouterState(hookName) {\r\n  let state = React.useContext(DataRouterStateContext);\r\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\r\n  return state;\r\n}\r\nfunction useRouteContext(hookName) {\r\n  let route = React.useContext(RouteContext);\r\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\r\n  return route;\r\n}\r\n\r\n// Internal version with hookName-aware debugging\r\nfunction useCurrentRouteId(hookName) {\r\n  let route = useRouteContext(hookName);\r\n  let thisRoute = route.matches[route.matches.length - 1];\r\n  !thisRoute.route.id ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, hookName + \" can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\r\n  return thisRoute.route.id;\r\n}\r\n\r\n/**\r\n * Returns the ID for the nearest contextual route\r\n */\r\nfunction useRouteId() {\r\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\r\n}\r\n\r\n/**\r\n * Returns the current navigation, defaulting to an \"idle\" navigation when\r\n * no navigation is in progress\r\n */\r\nfunction useNavigation() {\r\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\r\n  return state.navigation;\r\n}\r\n\r\n/**\r\n * Returns a revalidate function for manually triggering revalidation, as well\r\n * as the current state of any manual revalidations\r\n */\r\nfunction useRevalidator() {\r\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\r\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\r\n  return React.useMemo(() => ({\r\n    revalidate: dataRouterContext.router.revalidate,\r\n    state: state.revalidation\r\n  }), [dataRouterContext.router.revalidate, state.revalidation]);\r\n}\r\n\r\n/**\r\n * Returns the active route matches, useful for accessing loaderData for\r\n * parent/child routes or the route \"handle\" property\r\n */\r\nfunction useMatches() {\r\n  let {\r\n    matches,\r\n    loaderData\r\n  } = useDataRouterState(DataRouterStateHook.UseMatches);\r\n  return React.useMemo(() => matches.map(m => UNSAFE_convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);\r\n}\r\n\r\n/**\r\n * Returns the loader data for the nearest ancestor Route loader\r\n */\r\nfunction useLoaderData() {\r\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\r\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\r\n  if (state.errors && state.errors[routeId] != null) {\r\n    console.error(\"You cannot `useLoaderData` in an errorElement (routeId: \" + routeId + \")\");\r\n    return undefined;\r\n  }\r\n  return state.loaderData[routeId];\r\n}\r\n\r\n/**\r\n * Returns the loaderData for the given routeId\r\n */\r\nfunction useRouteLoaderData(routeId) {\r\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\r\n  return state.loaderData[routeId];\r\n}\r\n\r\n/**\r\n * Returns the action data for the nearest ancestor Route action\r\n */\r\nfunction useActionData() {\r\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\r\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\r\n  return state.actionData ? state.actionData[routeId] : undefined;\r\n}\r\n\r\n/**\r\n * Returns the nearest ancestor Route error, which could be a loader/action\r\n * error or a render error.  This is intended to be called from your\r\n * ErrorBoundary/errorElement to display a proper error message.\r\n */\r\nfunction useRouteError() {\r\n  var _state$errors;\r\n  let error = React.useContext(RouteErrorContext);\r\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\r\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\r\n\r\n  // If this was a render error, we put it in a RouteError context inside\r\n  // of RenderErrorBoundary\r\n  if (error !== undefined) {\r\n    return error;\r\n  }\r\n\r\n  // Otherwise look for errors from our data router state\r\n  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];\r\n}\r\n\r\n/**\r\n * Returns the happy-path data from the nearest ancestor `<Await />` value\r\n */\r\nfunction useAsyncValue() {\r\n  let value = React.useContext(AwaitContext);\r\n  return value == null ? void 0 : value._data;\r\n}\r\n\r\n/**\r\n * Returns the error from the nearest ancestor `<Await />` value\r\n */\r\nfunction useAsyncError() {\r\n  let value = React.useContext(AwaitContext);\r\n  return value == null ? void 0 : value._error;\r\n}\r\nlet blockerId = 0;\r\n\r\n/**\r\n * Allow the application to block navigations within the SPA and present the\r\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\r\n * using half-filled form data.  This does not handle hard-reloads or\r\n * cross-origin navigations.\r\n */\r\nfunction useBlocker(shouldBlock) {\r\n  let {\r\n    router,\r\n    basename\r\n  } = useDataRouterContext(DataRouterHook.UseBlocker);\r\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\r\n  let [blockerKey, setBlockerKey] = React.useState(\"\");\r\n  let blockerFunction = React.useCallback(arg => {\r\n    if (typeof shouldBlock !== \"function\") {\r\n      return !!shouldBlock;\r\n    }\r\n    if (basename === \"/\") {\r\n      return shouldBlock(arg);\r\n    }\r\n\r\n    // If they provided us a function and we've got an active basename, strip\r\n    // it from the locations we expose to the user to match the behavior of\r\n    // useLocation\r\n    let {\r\n      currentLocation,\r\n      nextLocation,\r\n      historyAction\r\n    } = arg;\r\n    return shouldBlock({\r\n      currentLocation: _extends({}, currentLocation, {\r\n        pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname\r\n      }),\r\n      nextLocation: _extends({}, nextLocation, {\r\n        pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname\r\n      }),\r\n      historyAction\r\n    });\r\n  }, [basename, shouldBlock]);\r\n\r\n  // This effect is in charge of blocker key assignment and deletion (which is\r\n  // tightly coupled to the key)\r\n  React.useEffect(() => {\r\n    let key = String(++blockerId);\r\n    setBlockerKey(key);\r\n    return () => router.deleteBlocker(key);\r\n  }, [router]);\r\n\r\n  // This effect handles assigning the blockerFunction.  This is to handle\r\n  // unstable blocker function identities, and happens only after the prior\r\n  // effect so we don't get an orphaned blockerFunction in the router with a\r\n  // key of \"\".  Until then we just have the IDLE_BLOCKER.\r\n  React.useEffect(() => {\r\n    if (blockerKey !== \"\") {\r\n      router.getBlocker(blockerKey, blockerFunction);\r\n    }\r\n  }, [router, blockerKey, blockerFunction]);\r\n\r\n  // Prefer the blocker from `state` not `router.state` since DataRouterContext\r\n  // is memoized so this ensures we update on blocker state updates\r\n  return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;\r\n}\r\n\r\n/**\r\n * Stable version of useNavigate that is used when we are in the context of\r\n * a RouterProvider.\r\n */\r\nfunction useNavigateStable() {\r\n  let {\r\n    router\r\n  } = useDataRouterContext(DataRouterHook.UseNavigateStable);\r\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\r\n  let activeRef = React.useRef(false);\r\n  useIsomorphicLayoutEffect(() => {\r\n    activeRef.current = true;\r\n  });\r\n  let navigate = React.useCallback(function (to, options) {\r\n    if (options === void 0) {\r\n      options = {};\r\n    }\r\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\r\n\r\n    // Short circuit here since if this happens on first render the navigate\r\n    // is useless because we haven't wired up our router subscriber yet\r\n    if (!activeRef.current) return;\r\n    if (typeof to === \"number\") {\r\n      router.navigate(to);\r\n    } else {\r\n      router.navigate(to, _extends({\r\n        fromRouteId: id\r\n      }, options));\r\n    }\r\n  }, [router, id]);\r\n  return navigate;\r\n}\r\nconst alreadyWarned = {};\r\nfunction warningOnce(key, cond, message) {\r\n  if (!cond && !alreadyWarned[key]) {\r\n    alreadyWarned[key] = true;\r\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, message) : void 0;\r\n  }\r\n}\r\n\r\n/**\r\n  Webpack + React 17 fails to compile on any of the following because webpack\r\n  complains that `startTransition` doesn't exist in `React`:\r\n  * import { startTransition } from \"react\"\r\n  * import * as React from from \"react\";\r\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\r\n  * import * as React from from \"react\";\r\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\r\n\r\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\r\n  * import * as React from from \"react\";\r\n    const START_TRANSITION = \"startTransition\";\r\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\r\n\r\n  However, that introduces webpack/terser minification issues in production builds\r\n  in React 18 where minification/obfuscation ends up removing the call of\r\n  React.startTransition entirely from the first half of the ternary.  Grabbing\r\n  this exported reference once up front resolves that issue.\r\n\r\n  See https://github.com/remix-run/react-router/issues/10579\r\n*/\r\nconst START_TRANSITION = \"startTransition\";\r\nconst startTransitionImpl = React[START_TRANSITION];\r\n\r\n/**\r\n * Given a Remix Router instance, render the appropriate UI\r\n */\r\nfunction RouterProvider(_ref) {\r\n  let {\r\n    fallbackElement,\r\n    router,\r\n    future\r\n  } = _ref;\r\n  let [state, setStateImpl] = React.useState(router.state);\r\n  let {\r\n    v7_startTransition\r\n  } = future || {};\r\n  let setState = React.useCallback(newState => {\r\n    if (v7_startTransition && startTransitionImpl) {\r\n      startTransitionImpl(() => setStateImpl(newState));\r\n    } else {\r\n      setStateImpl(newState);\r\n    }\r\n  }, [setStateImpl, v7_startTransition]);\r\n\r\n  // Need to use a layout effect here so we are subscribed early enough to\r\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\r\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\r\n  React.useEffect(() => {\r\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\r\n    // Only log this once on initial mount\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  let navigator = React.useMemo(() => {\r\n    return {\r\n      createHref: router.createHref,\r\n      encodeLocation: router.encodeLocation,\r\n      go: n => router.navigate(n),\r\n      push: (to, state, opts) => router.navigate(to, {\r\n        state,\r\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\r\n      }),\r\n      replace: (to, state, opts) => router.navigate(to, {\r\n        replace: true,\r\n        state,\r\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\r\n      })\r\n    };\r\n  }, [router]);\r\n  let basename = router.basename || \"/\";\r\n  let dataRouterContext = React.useMemo(() => ({\r\n    router,\r\n    navigator,\r\n    static: false,\r\n    basename\r\n  }), [router, navigator, basename]);\r\n\r\n  // The fragment and {null} here are important!  We need them to keep React 18's\r\n  // useId happy when we are server-rendering since we may have a <script> here\r\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\r\n  // useId relies on the component tree structure to generate deterministic id's\r\n  // so we need to ensure it remains the same on the client even though\r\n  // we don't need the <script> tag\r\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataRouterContext.Provider, {\r\n    value: dataRouterContext\r\n  }, /*#__PURE__*/React.createElement(DataRouterStateContext.Provider, {\r\n    value: state\r\n  }, /*#__PURE__*/React.createElement(Router, {\r\n    basename: basename,\r\n    location: state.location,\r\n    navigationType: state.historyAction,\r\n    navigator: navigator,\r\n    future: {\r\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\r\n    }\r\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(DataRoutes, {\r\n    routes: router.routes,\r\n    future: router.future,\r\n    state: state\r\n  }) : fallbackElement))), null);\r\n}\r\nfunction DataRoutes(_ref2) {\r\n  let {\r\n    routes,\r\n    future,\r\n    state\r\n  } = _ref2;\r\n  return useRoutesImpl(routes, undefined, state, future);\r\n}\r\n/**\r\n * A `<Router>` that stores all entries in memory.\r\n *\r\n * @see https://reactrouter.com/router-components/memory-router\r\n */\r\nfunction MemoryRouter(_ref3) {\r\n  let {\r\n    basename,\r\n    children,\r\n    initialEntries,\r\n    initialIndex,\r\n    future\r\n  } = _ref3;\r\n  let historyRef = React.useRef();\r\n  if (historyRef.current == null) {\r\n    historyRef.current = createMemoryHistory({\r\n      initialEntries,\r\n      initialIndex,\r\n      v5Compat: true\r\n    });\r\n  }\r\n  let history = historyRef.current;\r\n  let [state, setStateImpl] = React.useState({\r\n    action: history.action,\r\n    location: history.location\r\n  });\r\n  let {\r\n    v7_startTransition\r\n  } = future || {};\r\n  let setState = React.useCallback(newState => {\r\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\r\n  }, [setStateImpl, v7_startTransition]);\r\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\r\n  return /*#__PURE__*/React.createElement(Router, {\r\n    basename: basename,\r\n    children: children,\r\n    location: state.location,\r\n    navigationType: state.action,\r\n    navigator: history,\r\n    future: future\r\n  });\r\n}\r\n/**\r\n * Changes the current location.\r\n *\r\n * Note: This API is mostly useful in React.Component subclasses that are not\r\n * able to use hooks. In functional components, we recommend you use the\r\n * `useNavigate` hook instead.\r\n *\r\n * @see https://reactrouter.com/components/navigate\r\n */\r\nfunction Navigate(_ref4) {\r\n  let {\r\n    to,\r\n    replace,\r\n    state,\r\n    relative\r\n  } = _ref4;\r\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of\r\n  // the router loaded. We can help them understand how to avoid that.\r\n  \"<Navigate> may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\r\n  let {\r\n    future,\r\n    static: isStatic\r\n  } = React.useContext(NavigationContext);\r\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(!isStatic, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\r\n  let {\r\n    matches\r\n  } = React.useContext(RouteContext);\r\n  let {\r\n    pathname: locationPathname\r\n  } = useLocation();\r\n  let navigate = useNavigate();\r\n\r\n  // Resolve the path outside of the effect so that when effects run twice in\r\n  // StrictMode they navigate to the same place\r\n  let path = resolveTo(to, UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === \"path\");\r\n  let jsonPath = JSON.stringify(path);\r\n  React.useEffect(() => navigate(JSON.parse(jsonPath), {\r\n    replace,\r\n    state,\r\n    relative\r\n  }), [navigate, jsonPath, relative, replace, state]);\r\n  return null;\r\n}\r\n/**\r\n * Renders the child route's element, if there is one.\r\n *\r\n * @see https://reactrouter.com/components/outlet\r\n */\r\nfunction Outlet(props) {\r\n  return useOutlet(props.context);\r\n}\r\n/**\r\n * Declares an element that should be rendered at a certain URL path.\r\n *\r\n * @see https://reactrouter.com/components/route\r\n */\r\nfunction Route(_props) {\r\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : UNSAFE_invariant(false) ;\r\n}\r\n/**\r\n * Provides location context for the rest of the app.\r\n *\r\n * Note: You usually won't render a `<Router>` directly. Instead, you'll render a\r\n * router that is more specific to your environment such as a `<BrowserRouter>`\r\n * in web browsers or a `<StaticRouter>` for server rendering.\r\n *\r\n * @see https://reactrouter.com/router-components/router\r\n */\r\nfunction Router(_ref5) {\r\n  let {\r\n    basename: basenameProp = \"/\",\r\n    children = null,\r\n    location: locationProp,\r\n    navigationType = Action.Pop,\r\n    navigator,\r\n    static: staticProp = false,\r\n    future\r\n  } = _ref5;\r\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : UNSAFE_invariant(false) : void 0;\r\n\r\n  // Preserve trailing slashes on basename, so we can let the user control\r\n  // the enforcement of trailing slashes throughout the app\r\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\r\n  let navigationContext = React.useMemo(() => ({\r\n    basename,\r\n    navigator,\r\n    static: staticProp,\r\n    future: _extends({\r\n      v7_relativeSplatPath: false\r\n    }, future)\r\n  }), [basename, future, navigator, staticProp]);\r\n  if (typeof locationProp === \"string\") {\r\n    locationProp = parsePath(locationProp);\r\n  }\r\n  let {\r\n    pathname = \"/\",\r\n    search = \"\",\r\n    hash = \"\",\r\n    state = null,\r\n    key = \"default\"\r\n  } = locationProp;\r\n  let locationContext = React.useMemo(() => {\r\n    let trailingPathname = stripBasename(pathname, basename);\r\n    if (trailingPathname == null) {\r\n      return null;\r\n    }\r\n    return {\r\n      location: {\r\n        pathname: trailingPathname,\r\n        search,\r\n        hash,\r\n        state,\r\n        key\r\n      },\r\n      navigationType\r\n    };\r\n  }, [basename, pathname, search, hash, state, key, navigationType]);\r\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(locationContext != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\r\n  if (locationContext == null) {\r\n    return null;\r\n  }\r\n  return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\r\n    value: navigationContext\r\n  }, /*#__PURE__*/React.createElement(LocationContext.Provider, {\r\n    children: children,\r\n    value: locationContext\r\n  }));\r\n}\r\n/**\r\n * A container for a nested tree of `<Route>` elements that renders the branch\r\n * that best matches the current location.\r\n *\r\n * @see https://reactrouter.com/components/routes\r\n */\r\nfunction Routes(_ref6) {\r\n  let {\r\n    children,\r\n    location\r\n  } = _ref6;\r\n  return useRoutes(createRoutesFromChildren(children), location);\r\n}\r\n/**\r\n * Component to use for rendering lazily loaded data from returning defer()\r\n * in a loader function\r\n */\r\nfunction Await(_ref7) {\r\n  let {\r\n    children,\r\n    errorElement,\r\n    resolve\r\n  } = _ref7;\r\n  return /*#__PURE__*/React.createElement(AwaitErrorBoundary, {\r\n    resolve: resolve,\r\n    errorElement: errorElement\r\n  }, /*#__PURE__*/React.createElement(ResolveAwait, null, children));\r\n}\r\nvar AwaitRenderStatus = /*#__PURE__*/function (AwaitRenderStatus) {\r\n  AwaitRenderStatus[AwaitRenderStatus[\"pending\"] = 0] = \"pending\";\r\n  AwaitRenderStatus[AwaitRenderStatus[\"success\"] = 1] = \"success\";\r\n  AwaitRenderStatus[AwaitRenderStatus[\"error\"] = 2] = \"error\";\r\n  return AwaitRenderStatus;\r\n}(AwaitRenderStatus || {});\r\nconst neverSettledPromise = new Promise(() => {});\r\nclass AwaitErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null\r\n    };\r\n  }\r\n  static getDerivedStateFromError(error) {\r\n    return {\r\n      error\r\n    };\r\n  }\r\n  componentDidCatch(error, errorInfo) {\r\n    console.error(\"<Await> caught the following error during render\", error, errorInfo);\r\n  }\r\n  render() {\r\n    let {\r\n      children,\r\n      errorElement,\r\n      resolve\r\n    } = this.props;\r\n    let promise = null;\r\n    let status = AwaitRenderStatus.pending;\r\n    if (!(resolve instanceof Promise)) {\r\n      // Didn't get a promise - provide as a resolved promise\r\n      status = AwaitRenderStatus.success;\r\n      promise = Promise.resolve();\r\n      Object.defineProperty(promise, \"_tracked\", {\r\n        get: () => true\r\n      });\r\n      Object.defineProperty(promise, \"_data\", {\r\n        get: () => resolve\r\n      });\r\n    } else if (this.state.error) {\r\n      // Caught a render error, provide it as a rejected promise\r\n      status = AwaitRenderStatus.error;\r\n      let renderError = this.state.error;\r\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\r\n      Object.defineProperty(promise, \"_tracked\", {\r\n        get: () => true\r\n      });\r\n      Object.defineProperty(promise, \"_error\", {\r\n        get: () => renderError\r\n      });\r\n    } else if (resolve._tracked) {\r\n      // Already tracked promise - check contents\r\n      promise = resolve;\r\n      status = promise._error !== undefined ? AwaitRenderStatus.error : promise._data !== undefined ? AwaitRenderStatus.success : AwaitRenderStatus.pending;\r\n    } else {\r\n      // Raw (untracked) promise - track it\r\n      status = AwaitRenderStatus.pending;\r\n      Object.defineProperty(resolve, \"_tracked\", {\r\n        get: () => true\r\n      });\r\n      promise = resolve.then(data => Object.defineProperty(resolve, \"_data\", {\r\n        get: () => data\r\n      }), error => Object.defineProperty(resolve, \"_error\", {\r\n        get: () => error\r\n      }));\r\n    }\r\n    if (status === AwaitRenderStatus.error && promise._error instanceof AbortedDeferredError) {\r\n      // Freeze the UI by throwing a never resolved promise\r\n      throw neverSettledPromise;\r\n    }\r\n    if (status === AwaitRenderStatus.error && !errorElement) {\r\n      // No errorElement, throw to the nearest route-level error boundary\r\n      throw promise._error;\r\n    }\r\n    if (status === AwaitRenderStatus.error) {\r\n      // Render via our errorElement\r\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\r\n        value: promise,\r\n        children: errorElement\r\n      });\r\n    }\r\n    if (status === AwaitRenderStatus.success) {\r\n      // Render children with resolved value\r\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\r\n        value: promise,\r\n        children: children\r\n      });\r\n    }\r\n\r\n    // Throw to the suspense boundary\r\n    throw promise;\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`\r\n */\r\nfunction ResolveAwait(_ref8) {\r\n  let {\r\n    children\r\n  } = _ref8;\r\n  let data = useAsyncValue();\r\n  let toRender = typeof children === \"function\" ? children(data) : children;\r\n  return /*#__PURE__*/React.createElement(React.Fragment, null, toRender);\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// UTILS\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Creates a route config from a React \"children\" object, which is usually\r\n * either a `<Route>` element or an array of them. Used internally by\r\n * `<Routes>` to create a route config from its children.\r\n *\r\n * @see https://reactrouter.com/utils/create-routes-from-children\r\n */\r\nfunction createRoutesFromChildren(children, parentPath) {\r\n  if (parentPath === void 0) {\r\n    parentPath = [];\r\n  }\r\n  let routes = [];\r\n  React.Children.forEach(children, (element, index) => {\r\n    if (! /*#__PURE__*/React.isValidElement(element)) {\r\n      // Ignore non-elements. This allows people to more easily inline\r\n      // conditionals in their route config.\r\n      return;\r\n    }\r\n    let treePath = [...parentPath, index];\r\n    if (element.type === React.Fragment) {\r\n      // Transparently support React.Fragment and its children.\r\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));\r\n      return;\r\n    }\r\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : UNSAFE_invariant(false) : void 0;\r\n    !(!element.props.index || !element.props.children) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"An index route cannot have child routes.\") : UNSAFE_invariant(false) : void 0;\r\n    let route = {\r\n      id: element.props.id || treePath.join(\"-\"),\r\n      caseSensitive: element.props.caseSensitive,\r\n      element: element.props.element,\r\n      Component: element.props.Component,\r\n      index: element.props.index,\r\n      path: element.props.path,\r\n      loader: element.props.loader,\r\n      action: element.props.action,\r\n      errorElement: element.props.errorElement,\r\n      ErrorBoundary: element.props.ErrorBoundary,\r\n      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,\r\n      shouldRevalidate: element.props.shouldRevalidate,\r\n      handle: element.props.handle,\r\n      lazy: element.props.lazy\r\n    };\r\n    if (element.props.children) {\r\n      route.children = createRoutesFromChildren(element.props.children, treePath);\r\n    }\r\n    routes.push(route);\r\n  });\r\n  return routes;\r\n}\r\n\r\n/**\r\n * Renders the result of `matchRoutes()` into a React element.\r\n */\r\nfunction renderMatches(matches) {\r\n  return _renderMatches(matches);\r\n}\r\n\r\nfunction mapRouteProperties(route) {\r\n  let updates = {\r\n    // Note: this check also occurs in createRoutesFromChildren so update\r\n    // there if you change this -- please and thank you!\r\n    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null\r\n  };\r\n  if (route.Component) {\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n      if (route.element) {\r\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `Component` and `element` on your route - \" + \"`Component` will be used.\") : void 0;\r\n      }\r\n    }\r\n    Object.assign(updates, {\r\n      element: /*#__PURE__*/React.createElement(route.Component),\r\n      Component: undefined\r\n    });\r\n  }\r\n  if (route.HydrateFallback) {\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n      if (route.hydrateFallbackElement) {\r\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - \" + \"`HydrateFallback` will be used.\") : void 0;\r\n      }\r\n    }\r\n    Object.assign(updates, {\r\n      hydrateFallbackElement: /*#__PURE__*/React.createElement(route.HydrateFallback),\r\n      HydrateFallback: undefined\r\n    });\r\n  }\r\n  if (route.ErrorBoundary) {\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n      if (route.errorElement) {\r\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" + \"`ErrorBoundary` will be used.\") : void 0;\r\n      }\r\n    }\r\n    Object.assign(updates, {\r\n      errorElement: /*#__PURE__*/React.createElement(route.ErrorBoundary),\r\n      ErrorBoundary: undefined\r\n    });\r\n  }\r\n  return updates;\r\n}\r\nfunction createMemoryRouter(routes, opts) {\r\n  return createRouter({\r\n    basename: opts == null ? void 0 : opts.basename,\r\n    future: _extends({}, opts == null ? void 0 : opts.future, {\r\n      v7_prependBasename: true\r\n    }),\r\n    history: createMemoryHistory({\r\n      initialEntries: opts == null ? void 0 : opts.initialEntries,\r\n      initialIndex: opts == null ? void 0 : opts.initialIndex\r\n    }),\r\n    hydrationData: opts == null ? void 0 : opts.hydrationData,\r\n    routes,\r\n    mapRouteProperties\r\n  }).initialize();\r\n}\r\n\r\nexport { Await, MemoryRouter, Navigate, Outlet, Route, Router, RouterProvider, Routes, DataRouterContext as UNSAFE_DataRouterContext, DataRouterStateContext as UNSAFE_DataRouterStateContext, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, mapRouteProperties as UNSAFE_mapRouteProperties, useRouteId as UNSAFE_useRouteId, useRoutesImpl as UNSAFE_useRoutesImpl, createMemoryRouter, createRoutesFromChildren, createRoutesFromChildren as createRoutesFromElements, renderMatches, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes };\r\n//# sourceMappingURL=index.js.map\r\n", "////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n", "import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n  reloadDocument?: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (args: LoaderFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (args: ActionFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], decoded);\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nfunction decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === matches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n", "import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  ActionFunction,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  AgnosticRouteObject,\n  DataResult,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  ImmutableRouteKey,\n  LoaderFunction,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized: boolean;\n  let hasLazyRoutes = initialMatches.some((m) => m.route.lazy);\n  let hasLoaders = initialMatches.some((m) => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) return true;\n      // Explicitly opting-in to running on hydration\n      if (m.route.loader.hydrate === true) return false;\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        future.v7_relativeSplatPath\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors: pendingError || null,\n          ...(pendingActionData ? { actionData: pendingActionData } : {}),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    if (\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration)\n    ) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(\n        {\n          navigation: loadingNavigation,\n          ...(actionData\n            ? Object.keys(actionData).length === 0\n              ? { actionData: null }\n              : { actionData }\n            : {}),\n          ...(revalidatingFetchers.length > 0\n            ? { fetchers: new Map(state.fetchers) }\n            : {}),\n        },\n        {\n          flushSync,\n        }\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename,\n      future.v7_relativeSplatPath\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(state, actionResult, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename,\n      future.v7_relativeSplatPath\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true,\n    });\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          future.v7_relativeSplatPath\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        future.v7_relativeSplatPath,\n        { isStaticRequest: true, isRouteRequest, requestContext }\n      );\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          future.v7_relativeSplatPath,\n          { isStaticRequest: true, isRouteRequest, requestContext }\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  v7_relativeSplatPath: boolean,\n  opts: {\n    isStaticRequest?: boolean;\n    isRouteRequest?: boolean;\n    requestContext?: unknown;\n  } = {}\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({\n        request,\n        params: match.params,\n        context: opts.requestContext,\n      }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location,\n          v7_relativeSplatPath\n        );\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse: QueryRouteResponse = {\n        type:\n          resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result,\n      };\n      throw queryRouteResponse;\n    }\n\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || obj.type === ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": ["React", "Action", "PopStateEventType", "createMemoryHistory", "options", "initialEntries", "initialIndex", "v5Compat", "entries", "map", "entry", "index", "createMemoryLocation", "state", "undefined", "clampIndex", "length", "action", "Pop", "listener", "n", "Math", "min", "max", "getCurrentLocation", "to", "key", "location", "createLocation", "pathname", "warning", "charAt", "JSON", "stringify", "createHref", "createPath", "history", "createURL", "URL", "encodeLocation", "path", "parsePath", "search", "hash", "push", "Push", "nextLocation", "splice", "delta", "replace", "Replace", "go", "nextIndex", "listen", "fn", "createBrowserHistory", "createBrowserLocation", "window", "globalHistory", "usr", "createBrowserHref", "getUrlBasedHistory", "createHashHistory", "createHashLocation", "substr", "startsWith", "createHashHref", "base", "document", "querySelector", "href", "getAttribute", "url", "hashIndex", "indexOf", "slice", "validateHashLocation", "invariant", "value", "message", "Error", "cond", "console", "warn", "e", "createKey", "random", "toString", "getHistoryState", "idx", "current", "_extends", "_ref", "parsedPath", "searchIndex", "getLocation", "validateLocation", "defaultView", "getIndex", "replaceState", "handlePop", "historyState", "pushState", "error", "DOMException", "name", "assign", "origin", "addEventListener", "removeEventListener", "ResultType", "immutableRouteKeys", "Set", "isIndexRoute", "route", "convertRoutesToDataRoutes", "routes", "mapRouteProperties", "parentPath", "manifest", "treePath", "id", "join", "children", "indexRoute", "pathOrLayoutRoute", "matchRoutes", "locationArg", "basename", "stripBasename", "branches", "flattenRoutes", "rankRouteBranches", "matches", "i", "decoded", "decodePath", "matchRouteBranch", "convertRouteMatchToUiMatch", "match", "loaderData", "params", "data", "handle", "parentsMeta", "flattenRoute", "relativePath", "meta", "caseSensitive", "childrenIndex", "joinPaths", "routesMeta", "concat", "score", "computeScore", "forEach", "_route$path", "includes", "exploded", "explodeOptionalSegments", "segments", "split", "first", "rest", "isOptional", "endsWith", "required", "restExploded", "result", "subpath", "sort", "a", "b", "compareIndexes", "paramRe", "dynamicSegmentValue", "indexRouteValue", "emptySegmentValue", "staticSegmentValue", "splatPenalty", "isSplat", "s", "initialScore", "some", "filter", "reduce", "segment", "test", "siblings", "every", "branch", "matchedParams", "matchedPathname", "end", "remainingPathname", "matchPath", "Object", "pathnameBase", "normalizePathname", "generatePath", "originalPath", "prefix", "p", "String", "array", "isLastSegment", "star", "keyMatch", "optional", "param", "pattern", "matcher", "compiledParams", "compilePath", "captureGroups", "memo", "paramName", "splatValue", "regexpSource", "_", "RegExp", "v", "decodeURIComponent", "toLowerCase", "startIndex", "nextChar", "resolvePath", "fromPathname", "toPathname", "resolvePathname", "normalizeSearch", "normalizeHash", "relativeSegments", "pop", "getInvalidPathError", "char", "field", "dest", "getPathContributingMatches", "getResolveToMatches", "v7_relativeSplatPath", "pathMatches", "resolveTo", "toArg", "routePathnames", "locationPathname", "isPathRelative", "isEmptyPath", "from", "routePathnameIndex", "toSegments", "shift", "hasExplicitTrailingSlash", "hasCurrentTrailingSlash", "joinPaths", "paths", "join", "replace", "normalizePathname", "pathname", "normalizeSearch", "search", "startsWith", "normalizeHash", "hash", "json", "data", "init", "responseInit", "status", "headers", "Headers", "has", "set", "Response", "JSON", "stringify", "_extends", "AbortedDeferredError", "Error", "DeferredData", "constructor", "pendingKeysSet", "Set", "subscribers", "deferredKeys", "invariant", "Array", "isArray", "reject", "abortPromise", "Promise", "_", "r", "controller", "AbortController", "onAbort", "unlistenAbortSignal", "signal", "removeEventListener", "addEventListener", "Object", "entries", "reduce", "acc", "_ref2", "key", "value", "assign", "trackPromise", "done", "push", "add", "promise", "race", "then", "onSettle", "undefined", "error", "catch", "defineProperty", "get", "aborted", "delete", "undefinedError", "emit", "settledKey", "forEach", "subscriber", "subscribe", "fn", "cancel", "abort", "v", "k", "resolveData", "resolve", "size", "unwrappedData", "_ref3", "unwrapTrackedPromise", "pendingKeys", "from", "isTrackedPromise", "_tracked", "_error", "_data", "defer", "redirect", "url", "redirectDocument", "response", "ErrorResponseImpl", "statusText", "internal", "toString", "isRouteErrorResponse", "validMutationMethodsArr", "validMutationMethods", "validRequestMethodsArr", "validRequestMethods", "redirectStatusCodes", "redirectPreserveMethodStatusCodes", "IDLE_NAVIGATION", "state", "location", "formMethod", "formAction", "formEncType", "formData", "text", "IDLE_FETCHER", "IDLE_BLOCKER", "proceed", "reset", "ABSOLUTE_URL_REGEX", "defaultMapRouteProperties", "route", "hasErrorBoundary", "Boolean", "TRANSITIONS_STORAGE_KEY", "createRouter", "routerWindow", "window", "isBrowser", "document", "createElement", "isServer", "routes", "length", "mapRouteProperties", "detectErrorBoundary", "manifest", "dataRoutes", "convertRoutesToDataRoutes", "inFlightDataRoutes", "basename", "future", "v7_fetcherPersist", "v7_normalizeFormMethod", "v7_partialHydration", "v7_prependBasename", "v7_relativeSplatPath", "unlistenHistory", "savedScrollPositions", "getScrollRestorationKey", "getScrollPosition", "initialScrollRestored", "hydrationData", "initialMatches", "matchRoutes", "history", "initialErrors", "getInternalRouterError", "matches", "getShortCircuitMatches", "id", "initialized", "hasLazyRoutes", "some", "m", "lazy", "hasLoaders", "loader", "loaderData", "errors", "isRouteInitialized", "hydrate", "idx", "findIndex", "slice", "every", "router", "historyAction", "action", "navigation", "restoreScrollPosition", "preventScrollReset", "revalidation", "actionData", "fetchers", "Map", "blockers", "pendingAction", "HistoryAction", "Pop", "pendingPreventScrollReset", "pendingNavigationController", "pendingViewTransitionEnabled", "appliedViewTransitions", "removePageHideEventListener", "isUninterruptedRevalidation", "isRevalidationRequired", "cancelledDeferredRoutes", "cancelledFetcherLoads", "fetchControllers", "incrementingLoadId", "pendingNavigationLoadId", "fetchReloadIds", "fetchRedirectIds", "fetchLoadMatches", "activeFetchers", "deletedFetchers", "activeDeferreds", "blockerFunctions", "ignoreNextHistoryUpdate", "initialize", "listen", "_ref", "delta", "warning", "blockerKey", "shouldBlockNavigation", "currentLocation", "nextLocation", "go", "updateBlocker", "updateState", "startNavigation", "restoreAppliedTransitions", "_saveAppliedTransitions", "persistAppliedTransitions", "initialHydration", "dispose", "clear", "deleteFetcher", "deleteBlocker", "newState", "opts", "completedFetchers", "deletedFetchersKeys", "fetcher", "unstable_viewTransitionOpts", "viewTransitionOpts", "unstable_flushSync", "flushSync", "completeNavigation", "_temp", "_location$state", "_location$state2", "isActionReload", "isMutationMethod", "_isRedirect", "keys", "mergeLoaderData", "Push", "Replace", "priorPaths", "toPaths", "getSavedScrollPosition", "navigate", "to", "normalizedPath", "normalizeTo", "fromRouteId", "relative", "path", "submission", "normalizeNavigateOptions", "createLocation", "encodeLocation", "userReplace", "pendingError", "enableViewTransition", "unstable_viewTransition", "revalidate", "interruptActiveLoads", "startUninterruptedRevalidation", "overrideNavigation", "saveScrollPosition", "routesToUse", "loadingNavigation", "notFoundMatches", "cancelActiveDeferreds", "isHashChangeOnly", "request", "createClientSideRequest", "pendingActionData", "findNearestBoundary", "actionOutput", "handleAction", "shortCircuited", "pendingActionError", "getLoadingNavigation", "Request", "handleLoaders", "fetcherSubmission", "getSubmittingNavigation", "result", "actionMatch", "getTargetMatch", "type", "ResultType", "method", "routeId", "callLoaderOrAction", "isRedirectResult", "startRedirectNavigation", "isErrorResult", "boundaryMatch", "isDeferredResult", "activeSubmission", "getSubmissionFromNavigation", "matchesToLoad", "revalidatingFetchers", "getMatchesToLoad", "updatedFetchers", "markFetchRedirectsDone", "rf", "revalidatingFetcher", "getLoadingFetcher", "abortFetcher", "abortPendingFetchRevalidations", "f", "results", "loaderResults", "fetcherResults", "callLoadersAndMaybeResolveData", "findRedirect", "fetcherKey", "processLoaderData", "deferredData", "filter", "didAbortFetchLoads", "abortStaleFetchLoads", "shouldUpdateFetchers", "fetch", "href", "setFetcherError", "match", "handleFetcherAction", "handleFetcherLoader", "requestMatches", "existingFetcher", "updateFetcherState", "getSubmittingFetcher", "abortController", "fetchRequest", "originatingLoadId", "actionResult", "getDoneFetcher", "revalidationRequest", "loadId", "loadFetcher", "staleKey", "doneFetcher", "resolveDeferredData", "_temp2", "redirectLocation", "isDocumentReload", "reloadDocument", "test", "createURL", "origin", "stripBasename", "redirectHistoryAction", "currentMatches", "fetchersToLoad", "all", "map", "resolveDeferredResults", "getFetcher", "deleteFetcherAndUpdateState", "count", "markFetchersDone", "doneKeys", "landedId", "yeetedKeys", "getBlocker", "blocker", "newBlocker", "_ref4", "blockerFunction", "predicate", "cancelledRouteIds", "dfd", "enableScrollRestoration", "positions", "getPosition", "getKey", "y", "getScrollKey", "convertRouteMatchToUiMatch", "_internalSetRoutes", "newRoutes", "createHref", "_internalFetchControllers", "_internalActiveDeferreds", "UNSAFE_DEFERRED_SYMBOL", "Symbol", "isSubmissionNavigation", "opts", "formData", "body", "undefined", "normalizeTo", "location", "matches", "basename", "prependBasename", "to", "v7_relativeSplatPath", "fromRouteId", "relative", "contextualMatches", "activeRouteMatch", "match", "push", "route", "id", "length", "path", "resolveTo", "getResolveToMatches", "stripBasename", "pathname", "search", "hash", "index", "hasNakedIndexQuery", "replace", "joinPaths", "createPath", "normalizeNavigateOptions", "normalizeFormMethod", "isFetcher", "formMethod", "isValidMethod", "error", "getInternalRouterError", "method", "getInvalidBodyError", "type", "rawFormMethod", "toUpperCase", "toLowerCase", "formAction", "stripHashFromPath", "formEncType", "isMutationMethod", "text", "FormData", "URLSearchParams", "Array", "from", "entries", "reduce", "acc", "_ref5", "name", "value", "String", "submission", "json", "JSON", "parse", "e", "invariant", "searchParams", "convertFormDataToSearchParams", "convertSearchParamsToFormData", "parsedPath", "parsePath", "append", "getLoaderMatchesUntilBoundary", "boundaryId", "boundaryMatches", "findIndex", "m", "slice", "getMatchesToLoad", "history", "state", "isInitialLoad", "isRevalidationRequired", "cancelledDeferredRoutes", "cancelledFetcherLoads", "deletedFetchers", "fetchLoadMatches", "fetchRedirectIds", "routesToUse", "pendingActionData", "pendingError", "actionResult", "Object", "values", "currentUrl", "createURL", "nextUrl", "keys", "navigationMatches", "filter", "lazy", "loader", "hydrate", "loaderData", "errors", "isNewLoader", "some", "currentRouteMatch", "nextRouteMatch", "shouldRevalidateLoader", "_extends", "currentParams", "params", "nextParams", "defaultShouldRevalidate", "isNewRouteInstance", "revalidatingFetchers", "forEach", "f", "key", "routeId", "has", "fetcherMatches", "matchRoutes", "controller", "fetcher", "fetchers", "get", "fetcherMatch", "getTargetMatch", "shouldRevalidate", "includes", "data", "AbortController", "currentLoaderData", "currentMatch", "isNew", "isMissingData", "currentPath", "endsWith", "loaderMatch", "arg", "routeChoice", "loadLazyRouteModule", "mapRouteProperties", "manifest", "lazyRoute", "routeToUpdate", "routeUpdates", "lazyRouteProperty", "staticRouteValue", "isPropertyStaticallyDefined", "warning", "immutableRouteKeys", "assign", "callLoaderOrAction", "request", "resultType", "result", "onReject", "runHandler", "handler", "reject", "abortPromise", "Promise", "_", "r", "signal", "addEventListener", "race", "context", "requestContext", "handlerError", "all", "catch", "url", "URL", "ResultType", "removeEventListener", "isResponse", "status", "redirectStatusCodes", "headers", "ABSOLUTE_URL_REGEX", "test", "indexOf", "isStaticRequest", "startsWith", "protocol", "isSameBasename", "origin", "set", "redirect", "revalidate", "reloadDocument", "isRouteRequest", "queryRouteResponse", "response", "contentType", "ErrorResponseImpl", "statusText", "statusCode", "isDeferredData", "_result$init", "_result$init2", "deferred", "deferredData", "init", "Headers", "createClientSideRequest", "toString", "stringify", "Request", "processRouteLoaderData", "matchesToLoad", "results", "activeDeferreds", "foundError", "loaderHeaders", "isRedirectResult", "isErrorResult", "boundaryMatch", "findNearestBoundary", "isRouteErrorResponse", "isDeferredResult", "processLoaderData", "fetcherResults", "aborted", "delete", "doneFetcher", "getDoneFetcher", "mergeLoaderData", "newLoaderData", "mergedLoaderData", "hasOwnProperty", "eligibleMatches", "reverse", "find", "hasErrorBoundary", "getShortCircuitMatches", "routes", "pathnameBase", "_temp5", "errorMessage", "Error", "findRedirect", "i", "idx", "isHashChangeOnly", "a", "b", "subscribe", "cancel", "resolveData", "isValidMethod", "method", "validRequestMethods", "has", "toLowerCase", "isMutationMethod", "validMutationMethods", "resolveDeferredResults", "currentMatches", "matchesToLoad", "results", "signals", "isFetcher", "currentLoaderData", "index", "length", "result", "match", "currentMatch", "find", "m", "route", "id", "isRevalidatingLoader", "isNewRouteInstance", "undefined", "isDeferredResult", "signal", "invariant", "resolveDeferredData", "then", "unwrap", "aborted", "deferredData", "resolveData", "type", "ResultType", "data", "unwrappedData", "e", "error", "hasNakedIndexQuery", "search", "URLSearchParams", "getAll", "some", "v", "getTargetMatch", "matches", "location", "parsePath", "pathMatches", "getPathContributingMatches", "getSubmissionFromNavigation", "navigation", "formMethod", "formAction", "formEncType", "text", "formData", "json", "getLoadingNavigation", "submission", "state", "getSubmittingNavigation", "getLoadingFetcher", "fetcher", "getSubmittingFetcher", "existingFetcher", "getDoneFetcher", "restoreAppliedTransitions", "_window", "transitions", "sessionPositions", "sessionStorage", "getItem", "TRANSITIONS_STORAGE_KEY", "JSON", "parse", "k", "Object", "entries", "Array", "isArray", "set", "Set", "persistAppliedTransitions", "size", "setItem", "stringify", "warning", "_extends", "errors", "matches", "DataRouterHook", "DataRouterStateHook", "_extends", "AwaitRenderStatus", "_extends", "START_TRANSITION", "startTransitionImpl", "React", "transition", "state", "window", "ABSOLUTE_URL_REGEX", "DataRouterHook", "DataRouterStateHook", "getDataRouterConsoleError", "useDataRouterContext", "useDataRouterState", "FetcherForm", "location", "matches"]
}
